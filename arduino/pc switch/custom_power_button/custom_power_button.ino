/**************************************************************************
  This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

  This example is for a 128x32 pixel display using I2C to communicate
  3 pins are required to interface (two I2C and one reset).

  Adafruit invests time and resources providing this ;open
  source code, please support Adafruit and open-source
  hardware by purchasing products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries,
  with contributions from the open source community.
  BSD license, check license.txt for more information
  All text above, and the splash screen below must be
  included in any redistribution.
 **************************************************************************/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// #define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16

#define SERIAL_BUFFER_SIZE 16

static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000
};

// chester logo bez edupraha, 128x32px
static const unsigned char myBitmaplogo [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0xe0, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x1f, 0xf8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0xd0, 0x0b, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0xd0, 0x0b, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x10, 0x08, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0xe0, 0x07, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x00, 0x00, 0x01, 0x0f, 0x10, 0x47, 0xc7, 0x1f, 0x3e, 0x7c, 0x38, 0x07, 0x8f, 0xc0,
  0x00, 0x5c, 0x00, 0x00, 0x07, 0x10, 0x90, 0x44, 0x08, 0x84, 0x20, 0x42, 0x44, 0x08, 0x40, 0x40,
  0x00, 0x4b, 0xc0, 0x00, 0x3b, 0x20, 0x10, 0x44, 0x08, 0x04, 0x20, 0x42, 0x40, 0x10, 0x00, 0x80,
  0x00, 0x24, 0x3f, 0xff, 0xc5, 0x20, 0x10, 0x44, 0x04, 0x04, 0x20, 0x42, 0x20, 0x10, 0x01, 0x00,
  0x00, 0x23, 0xe4, 0x08, 0x8a, 0x20, 0x1f, 0xc7, 0x82, 0x04, 0x3c, 0x44, 0x10, 0x10, 0x01, 0x00,
  0x00, 0x10, 0x27, 0xf8, 0xf2, 0x20, 0x10, 0x44, 0x01, 0x04, 0x20, 0x78, 0x08, 0x10, 0x02, 0x00,
  0x00, 0x08, 0x24, 0x08, 0x84, 0x20, 0x10, 0x44, 0x00, 0x84, 0x20, 0x44, 0x04, 0x10, 0x04, 0x00,
  0x00, 0x04, 0x18, 0x08, 0x88, 0x20, 0x10, 0x44, 0x00, 0x84, 0x20, 0x44, 0x04, 0x10, 0x04, 0x00,
  0x00, 0x02, 0x00, 0x07, 0x10, 0x10, 0x90, 0x44, 0x09, 0x04, 0x20, 0x42, 0x48, 0x08, 0x48, 0x00,
  0x00, 0x01, 0xf0, 0x00, 0x20, 0x0f, 0x10, 0x47, 0xc6, 0x04, 0x3e, 0x42, 0x30, 0x87, 0x8f, 0xc0,
  0x00, 0x02, 0x0e, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x04, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x20, 0xff, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x27, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x00, 0x3e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'god dammit kris', 128x32px
const unsigned char god_dammit_kris [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xfb, 0xfe, 0x07, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xf7, 0xf9, 0xf9, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xd7, 0xf7, 0xfe, 0xff,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xcf, 0xf7, 0xb8, 0x77, 0xfe, 0xff,
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xbf, 0xfb, 0x7f, 0x6f, 0xff, 0x7f,
  0xdb, 0x78, 0xe6, 0x31, 0x8c, 0x5c, 0x7f, 0xff, 0xf7, 0xfe, 0x7f, 0x80, 0x84, 0xdd, 0x1f, 0xbf,
  0xdc, 0xfb, 0x5a, 0xd6, 0xb5, 0xdd, 0xff, 0xff, 0xf7, 0xfd, 0xff, 0xf6, 0xeb, 0xda, 0x5f, 0xbf,
  0xd8, 0x7b, 0x5a, 0x31, 0xb4, 0xdc, 0xff, 0xff, 0xf7, 0xfd, 0xe7, 0x81, 0x07, 0xd7, 0x63, 0xbf,
  0xdc, 0xfb, 0x5a, 0xf5, 0xb5, 0xdd, 0xff, 0xff, 0xf7, 0xf9, 0xef, 0x7f, 0xfb, 0xd7, 0xfd, 0xbf,
  0xdb, 0x78, 0xe6, 0xf6, 0x8c, 0x44, 0x7f, 0xff, 0xf7, 0x82, 0xf0, 0xdf, 0xad, 0xd7, 0xfd, 0xbf,
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x6c, 0xfe, 0x80, 0xfd, 0xd7, 0x1d, 0xbf,
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x73, 0xfe, 0xff, 0x0d, 0xd9, 0xf9, 0xbf,
  0xdf, 0xfb, 0x46, 0x31, 0x1f, 0x7d, 0xff, 0xff, 0xf7, 0x67, 0xfc, 0x3f, 0xfb, 0xe6, 0x76, 0x7f,
  0xdf, 0xfa, 0xdb, 0x6f, 0xbf, 0x7d, 0x9f, 0xbb, 0xf7, 0x9f, 0xfb, 0xc0, 0x07, 0xf6, 0x89, 0xff,
  0xdf, 0xf9, 0xc7, 0x73, 0xbf, 0x59, 0x5f, 0x15, 0xf7, 0xdf, 0x87, 0xef, 0xbf, 0xf9, 0xe6, 0xff,
  0xdf, 0xfa, 0xd7, 0x7d, 0xbf, 0x35, 0x3f, 0xb5, 0xf7, 0xdc, 0x5f, 0x9f, 0x7f, 0xf7, 0xdb, 0x7f,
  0xdf, 0xfb, 0x5a, 0x23, 0x1f, 0x59, 0x8f, 0x9b, 0xf7, 0xdb, 0x58, 0x7f, 0x7f, 0xf7, 0x38, 0x7f,
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xeb, 0x47, 0x7f, 0x7f, 0xec, 0xfb, 0x7f,
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xf3, 0x1f, 0x7f, 0xbf, 0xe2, 0xf5, 0x7f,
  0xdf, 0xfb, 0x5a, 0x37, 0x67, 0xc6, 0x2e, 0x8c, 0x77, 0xfc, 0xff, 0x7f, 0xbf, 0xf6, 0xf5, 0x7f,
  0xdf, 0xfa, 0xda, 0xd7, 0x5b, 0xf5, 0xe4, 0xbb, 0xb7, 0xff, 0x2b, 0x7f, 0xdf, 0xf7, 0x0d, 0x7f,
  0xdf, 0xf9, 0xda, 0x37, 0x43, 0xf6, 0x6a, 0x9e, 0x77, 0xff, 0x54, 0x3f, 0xe7, 0xf6, 0xfb, 0xbf,
  0xdf, 0xfa, 0xda, 0xba, 0xdb, 0xd7, 0xae, 0xbf, 0xf7, 0xff, 0x6b, 0xdf, 0xfb, 0xee, 0xfb, 0xbf,
  0xdf, 0xfb, 0x66, 0xdd, 0xdb, 0xcc, 0x6e, 0x8e, 0xf7, 0xfe, 0xf7, 0xe0, 0xf1, 0xf6, 0xfb, 0x7f,
  0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xfd, 0xfd, 0xff, 0x0f, 0xf9, 0xfc, 0xff,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xfd, 0xff, 0x7f, 0xfe, 0x63, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x67, 0xe2, 0xff, 0x9f, 0xfe, 0x9b, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x1f, 0x9f, 0x7f, 0xef, 0xfd, 0xbd, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x7f, 0x83, 0xef, 0xfc, 0xa1, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1d, 0xff, 0xf7, 0x8f, 0xfb, 0xbe, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xe0, 0x7f, 0xf8, 0x00, 0xff
};

const unsigned char god_dammit_kris_inverted [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x04, 0x01, 0xf8, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x08, 0x06, 0x06, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x28, 0x08, 0x01, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x30, 0x08, 0x47, 0x88, 0x01, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x40, 0x04, 0x80, 0x90, 0x00, 0x80,
  0x24, 0x87, 0x19, 0xce, 0x73, 0xa3, 0x80, 0x00, 0x08, 0x01, 0x80, 0x7f, 0x7b, 0x22, 0xe0, 0x40,
  0x23, 0x04, 0xa5, 0x29, 0x4a, 0x22, 0x00, 0x00, 0x08, 0x02, 0x00, 0x09, 0x14, 0x25, 0xa0, 0x40,
  0x27, 0x84, 0xa5, 0xce, 0x4b, 0x23, 0x00, 0x00, 0x08, 0x02, 0x18, 0x7e, 0xf8, 0x28, 0x9c, 0x40,
  0x23, 0x04, 0xa5, 0x0a, 0x4a, 0x22, 0x00, 0x00, 0x08, 0x06, 0x10, 0x80, 0x04, 0x28, 0x02, 0x40,
  0x24, 0x87, 0x19, 0x09, 0x73, 0xbb, 0x80, 0x00, 0x08, 0x7d, 0x0f, 0x20, 0x52, 0x28, 0x02, 0x40,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x93, 0x01, 0x7f, 0x02, 0x28, 0xe2, 0x40,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x8c, 0x01, 0x00, 0xf2, 0x26, 0x06, 0x40,
  0x20, 0x04, 0xb9, 0xce, 0xe0, 0x82, 0x00, 0x00, 0x08, 0x98, 0x03, 0xc0, 0x04, 0x19, 0x89, 0x80,
  0x20, 0x05, 0x24, 0x90, 0x40, 0x82, 0x60, 0x44, 0x08, 0x60, 0x04, 0x3f, 0xf8, 0x09, 0x76, 0x00,
  0x20, 0x06, 0x38, 0x8c, 0x40, 0xa6, 0xa0, 0xea, 0x08, 0x20, 0x78, 0x10, 0x40, 0x06, 0x19, 0x00,
  0x20, 0x05, 0x28, 0x82, 0x40, 0xca, 0xc0, 0x4a, 0x08, 0x23, 0xa0, 0x60, 0x80, 0x08, 0x24, 0x80,
  0x20, 0x04, 0xa5, 0xdc, 0xe0, 0xa6, 0x70, 0x64, 0x08, 0x24, 0xa7, 0x80, 0x80, 0x08, 0xc7, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0xb8, 0x80, 0x80, 0x13, 0x04, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0xe0, 0x80, 0x40, 0x1d, 0x0a, 0x80,
  0x20, 0x04, 0xa5, 0xc8, 0x98, 0x39, 0xd1, 0x73, 0x88, 0x03, 0x00, 0x80, 0x40, 0x09, 0x0a, 0x80,
  0x20, 0x05, 0x25, 0x28, 0xa4, 0x0a, 0x1b, 0x44, 0x48, 0x00, 0xd4, 0x80, 0x20, 0x08, 0xf2, 0x80,
  0x20, 0x06, 0x25, 0xc8, 0xbc, 0x09, 0x95, 0x61, 0x88, 0x00, 0xab, 0xc0, 0x18, 0x09, 0x04, 0x40,
  0x20, 0x05, 0x25, 0x45, 0x24, 0x28, 0x51, 0x40, 0x08, 0x00, 0x94, 0x20, 0x04, 0x11, 0x04, 0x40,
  0x20, 0x04, 0x99, 0x22, 0x24, 0x33, 0x91, 0x71, 0x08, 0x01, 0x08, 0x1f, 0x0e, 0x09, 0x04, 0x80,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x02, 0x00, 0xf0, 0x06, 0x03, 0x00,
  0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x04, 0x02, 0x00, 0x80, 0x01, 0x9c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x1d, 0x00, 0x60, 0x01, 0x64, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xe0, 0x60, 0x80, 0x10, 0x02, 0x42, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x80, 0x7c, 0x10, 0x03, 0x5e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x08, 0x70, 0x04, 0x41, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x1f, 0x80, 0x07, 0xff, 0x00
};

static const unsigned char big_chester [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x07, 0x80, 0x00, 0x02,
  0x1f, 0xf8, 0x40, 0x00, 0x02, 0xd0, 0x0b, 0x40, 0x00, 0x02, 0xd0, 0x0b, 0x40, 0x00, 0x02, 0x10,
  0x08, 0x60, 0x00, 0x05, 0xe0, 0x07, 0x98, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00,
  0x02, 0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x00, 0x01,
  0x00, 0x5c, 0x00, 0x00, 0x07, 0x00, 0x4b, 0xc0, 0x00, 0x3b, 0x00, 0x24, 0x3f, 0xff, 0xc5, 0x00,
  0x23, 0xe4, 0x08, 0x8a, 0x00, 0x10, 0x27, 0xf8, 0xf2, 0x00, 0x08, 0x24, 0x08, 0x84, 0x00, 0x04,
  0x18, 0x08, 0x88, 0x00, 0x02, 0x00, 0x07, 0x10, 0x00, 0x01, 0xf0, 0x00, 0x20, 0x00, 0x02, 0x0e,
  0x00, 0x40, 0x00, 0x04, 0x01, 0xff, 0x80, 0x00, 0x08, 0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x00,
  0x80, 0x00, 0x20, 0x00, 0x00, 0x40, 0x00, 0x20, 0xff, 0x80, 0x40, 0x00, 0x27, 0x00, 0x40, 0x40,
  0x00, 0x18, 0x00, 0x3e, 0x40, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char amogus [][20] PROGMEM = {
  {
    0x00, 0x00, 0x7e, 0x00, 0x91, 0x00, 0xa1, 0x00, 0x40, 0x80, 0x40, 0x80, 0x26, 0x80, 0x19, 0x00,
    0x10, 0x00, 0x00, 0x00
  },
  {
    0x07, 0x00, 0x78, 0x80, 0xa0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0x20, 0x40, 0x22, 0x80, 0x15, 0x00,
    0x18, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x7e, 0x00, 0x89, 0x80, 0x90, 0x40, 0xe0, 0x40, 0x20, 0x40, 0x20, 0x80, 0x17, 0x00,
    0x18, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x38, 0x00, 0x47, 0x00, 0x48, 0x80, 0x50, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20, 0x80,
    0x1f, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x3c, 0x00, 0x47, 0x00, 0xbc, 0x80, 0x40, 0x40, 0x40, 0x80, 0x40, 0x80, 0x67, 0x00,
    0x18, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x3e, 0x00, 0xe1, 0x00, 0xc0, 0x80, 0x40, 0x80, 0x40, 0x80, 0x22, 0x80, 0x25, 0x00,
    0x18, 0x00, 0x00, 0x00
  }
};

const unsigned char amogus_big [][128] PROGMEM = {
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x03, 0xe0, 0x18, 0x00,
    0x0c, 0x80, 0x06, 0x00, 0x11, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0x80, 0x24, 0x00, 0x00, 0x80,
    0x44, 0x00, 0x00, 0x40, 0x44, 0x00, 0x00, 0x20, 0x7c, 0x00, 0x00, 0x20, 0x8c, 0x00, 0x00, 0x20,
    0xf4, 0x00, 0x00, 0x10, 0x24, 0x00, 0x00, 0x10, 0x14, 0x00, 0x00, 0x10, 0x14, 0x00, 0x00, 0x10,
    0x0c, 0x00, 0x00, 0x10, 0x0c, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x10,
    0x02, 0x00, 0x00, 0x10, 0x01, 0x00, 0x08, 0x10, 0x01, 0x00, 0x34, 0x20, 0x00, 0x80, 0xc2, 0x20,
    0x00, 0x41, 0x03, 0xc0, 0x00, 0x42, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x01, 0x80, 0xe0, 0x01, 0xfe, 0x00, 0x10,
    0x0e, 0x08, 0x00, 0x08, 0x12, 0x10, 0x00, 0x04, 0x22, 0x20, 0x00, 0x02, 0x41, 0xc0, 0x00, 0x01,
    0x40, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x70, 0x00, 0x00, 0x01, 0x88, 0x00, 0x00, 0x01,
    0x90, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x01,
    0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x02,
    0x00, 0x80, 0x00, 0x04, 0x00, 0x80, 0x00, 0x08, 0x00, 0x40, 0x0e, 0x10, 0x00, 0x40, 0x71, 0x30,
    0x00, 0x40, 0x81, 0xc0, 0x00, 0x21, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0xff, 0xfe, 0x00, 0x18, 0x80, 0x41, 0xc0, 0x21, 0x00, 0x80, 0x30, 0x21, 0x03, 0x00, 0x08,
    0x40, 0x84, 0x00, 0x06, 0x40, 0x78, 0x00, 0x02, 0x70, 0x00, 0x00, 0x01, 0x88, 0x00, 0x00, 0x01,
    0x88, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x01,
    0x08, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02,
    0x01, 0x00, 0x00, 0x04, 0x00, 0x80, 0x00, 0x08, 0x00, 0x80, 0x00, 0x10, 0x00, 0x40, 0x00, 0x20,
    0x00, 0x2f, 0xfe, 0xc0, 0x00, 0x21, 0x01, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x60, 0x00, 0x00, 0x03, 0x9e, 0x00, 0x00, 0x0c, 0x61, 0xf8, 0x00, 0x10, 0x80, 0x27, 0x00,
    0x10, 0x80, 0x10, 0x80, 0x20, 0x80, 0x60, 0x60, 0x20, 0x41, 0x80, 0x10, 0x38, 0x26, 0x00, 0x08,
    0x48, 0x18, 0x00, 0x04, 0x70, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x02, 0x08, 0x80, 0x00, 0x02,
    0x05, 0x80, 0x00, 0x01, 0x05, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x01,
    0x02, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x04,
    0x02, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0x0f, 0x00,
    0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
    0x07, 0x39, 0xc0, 0x00, 0x08, 0x1f, 0x3c, 0x00, 0x10, 0x60, 0x83, 0x00, 0x20, 0x80, 0x40, 0xc0,
    0x20, 0x80, 0x20, 0x20, 0x30, 0x80, 0x40, 0x10, 0x48, 0x41, 0x80, 0x08, 0x51, 0x46, 0x00, 0x08,
    0x26, 0x38, 0x00, 0x04, 0x14, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04,
    0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x08,
    0x20, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x20,
    0x06, 0x00, 0x07, 0xc0, 0x01, 0x80, 0x78, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x3e, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  },
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
    0x07, 0x3f, 0xfc, 0x00, 0x08, 0x20, 0x03, 0x00, 0x11, 0xc0, 0x00, 0x80, 0x21, 0x00, 0x00, 0x40,
    0x42, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x20, 0x94, 0x00, 0x00, 0x20, 0xe8, 0x00, 0x00, 0x10,
    0x08, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x10,
    0x08, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x10,
    0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x10, 0x01, 0x00, 0x0c, 0x20, 0x01, 0x00, 0x32, 0x20,
    0x00, 0x80, 0xc3, 0xe0, 0x00, 0x41, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
};

const unsigned char nano [] PROGMEM = {
  // 'NANO, 11x18px
  0x1f, 0x00, 0xf1, 0xe0, 0x8e, 0x20, 0xa0, 0xa0, 0x80, 0x20, 0xa0, 0xa0, 0x80, 0x20, 0xa0, 0xa0,
  0x80, 0x20, 0xa0, 0xa0, 0x80, 0x20, 0xa0, 0xa0, 0x8a, 0x20, 0xa0, 0xa0, 0x8e, 0x20, 0xae, 0xa0,
  0x80, 0x20, 0xff, 0xe0
};

const unsigned char uno [] PROGMEM = {
  // 'UNO, 15x17px
  0x38, 0x78, 0xef, 0xce, 0x80, 0x02, 0xa0, 0x0a, 0xa0, 0x0a, 0xaa, 0xaa, 0xa0, 0x0a, 0xa0, 0x0a,
  0xa0, 0x0a, 0xa0, 0x0a, 0xa0, 0x0a, 0xa0, 0x0a, 0xa0, 0x0a, 0xa3, 0x8a, 0xa3, 0x8a, 0x80, 0x02,
  0xff, 0xfe
};


const unsigned char notready [][512] PROGMEM = {
  {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x70, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
    0x01, 0xdf, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x80,
    0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x01, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x28, 0x80,
    0x01, 0x47, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x80,
    0x01, 0x47, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x80,
    0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xba, 0x80,
    0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x27, 0x19, 0x93, 0x28, 0xe4, 0x32, 0x25, 0x15, 0xba,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x52, 0x15, 0x2a, 0xa8, 0x4a, 0x2a, 0x55, 0x15, 0x12,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x52, 0x19, 0xba, 0x90, 0x4a, 0x32, 0x72, 0x09, 0x92,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x52, 0x15, 0x2a, 0x90, 0x4a, 0x22, 0x52, 0x09, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x22, 0x15, 0xab, 0x10, 0x44, 0x23, 0x52, 0x09, 0x92,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }, {
    // 'frame_1_delay-0', 128x32px
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x70, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
    0x01, 0xdf, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x80,
    0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x28, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x92, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x28, 0x80,
    0x01, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x44, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x54, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x92, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x92, 0x80,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x11, 0x00,
    0x01, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x01, 0x47, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80,
    0x01, 0x47, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xba, 0x80,
    0x01, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x27, 0x19, 0x93, 0x28, 0xe4, 0x32, 0x25, 0x15, 0xba,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x52, 0x15, 0x2a, 0xa8, 0x4a, 0x2a, 0x55, 0x15, 0x12,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x52, 0x19, 0xba, 0x90, 0x4a, 0x32, 0x72, 0x09, 0x92,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x52, 0x15, 0x2a, 0x90, 0x4a, 0x22, 0x52, 0x09, 0x10,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x22, 0x15, 0xab, 0x10, 0x44, 0x23, 0x52, 0x09, 0x92,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  }
};


const uint8_t __comic15pt7bBitmaps[] PROGMEM = {
  0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xBE, 0xC6, 0xC7, 0xC7,
  0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC6, 0x00, 0x60, 0x18, 0x00, 0x60, 0x38,
  0x00, 0xE0, 0x38, 0x00, 0xE0, 0x30, 0x00, 0xE0, 0x70, 0x3F, 0xFF, 0xFF,
  0x3F, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0x01, 0x80, 0xE0, 0x03, 0x80, 0xE0,
  0x03, 0x80, 0xC0, 0x03, 0x01, 0xC0, 0x07, 0x01, 0xC0, 0x7F, 0xFF, 0xFC,
  0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFE, 0x0E, 0x03, 0x80, 0x0E, 0x03, 0x80,
  0x0C, 0x07, 0x00, 0x1C, 0x07, 0x00, 0x1C, 0x07, 0x00, 0x18, 0x06, 0x00,
  0x00, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x03, 0xF8, 0x07, 0xFE,
  0x1F, 0xFE, 0x1D, 0xCE, 0x39, 0xC0, 0x39, 0xC0, 0x79, 0xC0, 0x79, 0xC0,
  0x3D, 0xC0, 0x3F, 0xF0, 0x1F, 0xFC, 0x07, 0xFE, 0x01, 0xDF, 0x01, 0xC7,
  0x01, 0xC7, 0x01, 0xC7, 0x01, 0xC7, 0x61, 0xCF, 0xF9, 0xDE, 0x7F, 0xFE,
  0x7F, 0xFC, 0x1F, 0xF0, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0,
  0x00, 0xC0, 0x00, 0x07, 0x00, 0xE0, 0x38, 0x1F, 0xC3, 0x81, 0xC6, 0x1C,
  0x0E, 0x39, 0xC0, 0x61, 0xCE, 0x03, 0x8E, 0x60, 0x0C, 0x67, 0x00, 0x7F,
  0x30, 0x01, 0xE3, 0x80, 0x00, 0x18, 0x00, 0x01, 0xC0, 0x00, 0x0C, 0x00,
  0x00, 0xE0, 0x00, 0x07, 0x0F, 0x00, 0x71, 0xFE, 0x03, 0x8E, 0x30, 0x38,
  0xE1, 0xC1, 0xC7, 0x0E, 0x1C, 0x38, 0x70, 0xE0, 0xC3, 0x06, 0x07, 0xF0,
  0x30, 0x0F, 0x00, 0x00, 0xE0, 0x00, 0xF8, 0x00, 0xEE, 0x00, 0x77, 0x00,
  0x33, 0x80, 0x19, 0xC0, 0x0F, 0xC0, 0x07, 0xE0, 0x03, 0xE0, 0x03, 0xE0,
  0x03, 0xF0, 0x03, 0xDC, 0x63, 0x8E, 0x33, 0x83, 0xB9, 0x81, 0xDD, 0xC0,
  0x7E, 0xE0, 0x1E, 0x70, 0x0F, 0x38, 0x07, 0x8E, 0x0F, 0xC7, 0xFF, 0xF1,
  0xFF, 0x18, 0x3E, 0x0E, 0x00, 0x03, 0xDF, 0xFF, 0xF0, 0x03, 0x0F, 0x1E,
  0x1C, 0x38, 0x38, 0x70, 0x70, 0x60, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0,
  0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x70, 0x38, 0x3C, 0x1E,
  0x0F, 0x07, 0xC0, 0xE0, 0xF0, 0x78, 0x38, 0x1C, 0x1C, 0x0E, 0x0E, 0x0E,
  0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x0E, 0x0E,
  0x0E, 0x1C, 0x1C, 0x38, 0xF8, 0xF0, 0xC0, 0x06, 0x00, 0x30, 0x01, 0x81,
  0x8C, 0x0F, 0x7F, 0x3F, 0xFC, 0x3F, 0xC3, 0xF0, 0x3F, 0xC3, 0xCF, 0x18,
  0x38, 0x00, 0xC0, 0x06, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x0F, 0xFE,
  0xFF, 0xFF, 0xFF, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x06, 0x00, 0x37,
  0x76, 0xEC, 0xC0, 0xFF, 0x7F, 0xFF, 0xC0, 0x6E, 0xE6, 0x00, 0x38, 0x01,
  0xC0, 0x1C, 0x00, 0xE0, 0x06, 0x00, 0x70, 0x03, 0x80, 0x38, 0x01, 0xC0,
  0x1C, 0x00, 0xE0, 0x0E, 0x00, 0x70, 0x07, 0x00, 0x38, 0x03, 0x80, 0x1C,
  0x01, 0xC0, 0x0E, 0x00, 0xE0, 0x07, 0x00, 0x30, 0x03, 0x80, 0x18, 0x00,
  0x07, 0xE0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3C, 0x3C, 0x78, 0x1E, 0x70, 0x0E,
  0xE0, 0x0E, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x07,
  0xE0, 0x07, 0xE0, 0x06, 0xE0, 0x0E, 0xE0, 0x0E, 0x70, 0x0E, 0x70, 0x1C,
  0x3C, 0x3C, 0x3F, 0xF8, 0x1F, 0xF0, 0x07, 0xE0, 0x06, 0x0F, 0x0F, 0x8F,
  0xCF, 0xE3, 0x70, 0x38, 0x1C, 0x0E, 0x07, 0x03, 0x81, 0x80, 0xC0, 0x60,
  0x70, 0x38, 0x0C, 0x06, 0x03, 0x0F, 0xFF, 0xFB, 0xFC, 0x07, 0xC0, 0x7F,
  0xC3, 0xFF, 0x9E, 0x1E, 0xF0, 0x39, 0x80, 0xE0, 0x03, 0x80, 0x0E, 0x00,
  0x78, 0x03, 0xC0, 0x3E, 0x01, 0xF0, 0x0F, 0x00, 0xF8, 0x03, 0x80, 0x1C,
  0x00, 0x70, 0x03, 0x80, 0x0E, 0x00, 0x3F, 0xFE, 0xFF, 0xFD, 0xFF, 0xE0,
  0x0F, 0x81, 0xFF, 0x1F, 0xFC, 0xF0, 0xE6, 0x03, 0x80, 0x1C, 0x00, 0xE0,
  0x0E, 0x03, 0xF0, 0x7F, 0x03, 0xF8, 0x03, 0xE0, 0x07, 0x80, 0x1C, 0x00,
  0xE0, 0x07, 0xC0, 0x3F, 0x01, 0xFC, 0x1E, 0xFF, 0xE3, 0xFE, 0x07, 0xC0,
  0x00, 0x30, 0x00, 0x78, 0x00, 0xF8, 0x01, 0xF8, 0x01, 0xB8, 0x03, 0xB8,
  0x07, 0x38, 0x06, 0x38, 0x0E, 0x38, 0x1C, 0x38, 0x1C, 0x38, 0x38, 0x38,
  0x70, 0x38, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x38, 0x00, 0x38,
  0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x30, 0xFF, 0xFB, 0xFF, 0xF7,
  0xFF, 0x9C, 0x00, 0x60, 0x01, 0x80, 0x0E, 0x7E, 0x3F, 0xFC, 0xFF, 0xFB,
  0xF0, 0xFF, 0x01, 0xF8, 0x07, 0xC0, 0x0C, 0x00, 0x30, 0x01, 0xC0, 0x07,
  0x00, 0x1F, 0x00, 0xEE, 0x0F, 0xBF, 0xFC, 0x7F, 0xE0, 0x7E, 0x00, 0x01,
  0x80, 0x0E, 0x00, 0x78, 0x03, 0xC0, 0x1E, 0x00, 0xF0, 0x03, 0x80, 0x1C,
  0x00, 0x67, 0xC3, 0xFF, 0xCF, 0xFF, 0xBC, 0x1E, 0xC0, 0x3B, 0x00, 0x7C,
  0x01, 0xF8, 0x07, 0xE0, 0x1F, 0x80, 0xEF, 0x07, 0x9F, 0xFC, 0x3F, 0xE0,
  0x3E, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x00, 0x1E, 0x00, 0x3C,
  0x00, 0x38, 0x00, 0x70, 0x00, 0x70, 0x00, 0xE0, 0x00, 0xE0, 0x01, 0xC0,
  0x01, 0xC0, 0x03, 0xC0, 0x03, 0x80, 0x03, 0x80, 0x07, 0x00, 0x07, 0x00,
  0x0E, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x0F, 0xC0,
  0xFF, 0x87, 0xFF, 0x1E, 0x1E, 0x60, 0x3B, 0x80, 0xEE, 0x03, 0x9E, 0x3C,
  0x7F, 0xE0, 0xFF, 0x03, 0xFF, 0x1F, 0x3E, 0xF0, 0x3B, 0x80, 0x7E, 0x01,
  0xF0, 0x07, 0xE0, 0x1F, 0x80, 0xFF, 0x07, 0x9F, 0xFE, 0x3F, 0xF0, 0x3F,
  0x00, 0x0F, 0xC0, 0xFF, 0x87, 0xFF, 0x9E, 0x1E, 0xE0, 0x3F, 0x80, 0x7C,
  0x01, 0xF0, 0x03, 0xC0, 0x0F, 0x80, 0x7E, 0x01, 0xFE, 0x1F, 0x7F, 0xFC,
  0xFF, 0xE0, 0xFB, 0x80, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1E, 0x01, 0xF0,
  0x3F, 0x01, 0xF0, 0x07, 0x00, 0x00, 0xDF, 0xE0, 0x00, 0x1B, 0xFE, 0x31,
  0xCE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1D, 0xDC, 0xE6, 0x00, 0x01,
  0x81, 0xC1, 0xC1, 0xC3, 0xC3, 0xC3, 0xE0, 0xF8, 0x1E, 0x07, 0x81, 0xE0,
  0x60, 0x7F, 0xFF, 0xFD, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7F, 0xEF, 0xFD, 0xFF, 0x80, 0x60, 0x38, 0x0E, 0x01, 0x80, 0x20, 0x3C,
  0x3E, 0x3F, 0x3F, 0x3E, 0x3E, 0x1E, 0x0C, 0x00, 0x1E, 0x03, 0xFC, 0x3F,
  0xF1, 0xE3, 0xCC, 0x0E, 0x00, 0x38, 0x00, 0xC0, 0x06, 0x00, 0x78, 0x03,
  0xC0, 0x3E, 0x07, 0xE0, 0x7F, 0x07, 0xF8, 0x7F, 0x83, 0xE0, 0x1C, 0x00,
  0x00, 0x06, 0x00, 0x70, 0x03, 0x80, 0x18, 0x00, 0x00, 0xFE, 0x00, 0x0F,
  0xFF, 0x00, 0x3F, 0xFF, 0x80, 0xF8, 0x1F, 0x83, 0xC0, 0x0F, 0x8F, 0x00,
  0x07, 0x9C, 0x1E, 0x07, 0x78, 0x7C, 0x0E, 0xE1, 0xF0, 0x0F, 0xC7, 0x80,
  0x1F, 0x9C, 0x30, 0x3F, 0x38, 0x70, 0x7C, 0x71, 0xC0, 0xF8, 0xE7, 0xC3,
  0xB9, 0xFF, 0xFF, 0x71, 0xFF, 0xFC, 0xE1, 0xE3, 0xE1, 0xE0, 0x00, 0x01,
  0xC0, 0x00, 0x01, 0xC0, 0x00, 0x03, 0xC0, 0x0C, 0x03, 0xE0, 0x7C, 0x03,
  0xFF, 0xF8, 0x01, 0xFF, 0xE0, 0x00, 0xFE, 0x00, 0x00, 0x10, 0x00, 0x1C,
  0x00, 0x1E, 0x00, 0x1F, 0x00, 0x0F, 0x80, 0x0E, 0xE0, 0x07, 0x70, 0x07,
  0x38, 0x07, 0x9C, 0x03, 0x86, 0x03, 0xC3, 0x81, 0xCF, 0xC1, 0xFF, 0xE1,
  0xFF, 0xF0, 0xFF, 0x18, 0x70, 0x0E, 0x78, 0x07, 0x38, 0x03, 0x9C, 0x01,
  0xFC, 0x00, 0x7E, 0x00, 0x3E, 0x00, 0x0C, 0x7F, 0x03, 0xFF, 0x0F, 0xFE,
  0x38, 0x7C, 0xE0, 0x73, 0x80, 0xEE, 0x03, 0xB8, 0x0E, 0xE0, 0x73, 0x81,
  0xCE, 0x1F, 0x3F, 0xF8, 0xFF, 0xE3, 0xFF, 0xCE, 0x0F, 0xB8, 0x0F, 0xE0,
  0x1F, 0x80, 0x7E, 0x07, 0xF8, 0x7E, 0xFF, 0xF3, 0xFF, 0x0F, 0xE0, 0x00,
  0x00, 0x7F, 0x01, 0xFF, 0x03, 0xFF, 0x07, 0x87, 0x0F, 0x03, 0x1E, 0x00,
  0x1C, 0x00, 0x3C, 0x00, 0x38, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00,
  0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x70, 0x06, 0x70, 0x1E,
  0x78, 0x3E, 0x3F, 0xFC, 0x1F, 0xF0, 0x07, 0xC0, 0xE0, 0x00, 0xF8, 0x00,
  0xFF, 0x00, 0xEF, 0xC0, 0xE3, 0xE0, 0xE0, 0xF8, 0xE0, 0x3C, 0xE0, 0x1E,
  0xE0, 0x0E, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03,
  0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x0F, 0xE0, 0x1E, 0xE0, 0x3E, 0xFF, 0xFC,
  0xFF, 0xF0, 0x1F, 0xC0, 0x7F, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x06,
  0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x01, 0xC1, 0xFB, 0xFF,
  0xF7, 0xFF, 0xEF, 0xF0, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x01,
  0xC0, 0x03, 0x80, 0x07, 0xFF, 0xE7, 0xFF, 0xC3, 0xFF, 0x00, 0x7F, 0xF0,
  0xFF, 0xF9, 0xFF, 0xFB, 0xC0, 0x76, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30,
  0x00, 0x60, 0x00, 0xCF, 0xF1, 0xFF, 0xE3, 0xFF, 0xC7, 0x80, 0x0C, 0x00,
  0x38, 0x00, 0x70, 0x00, 0xE0, 0x01, 0xC0, 0x03, 0x80, 0x07, 0x00, 0x0E,
  0x00, 0x0C, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xFF, 0x80, 0x7F, 0xF0, 0x3E,
  0x3C, 0x0E, 0x03, 0x07, 0x80, 0x03, 0xC0, 0x00, 0xE0, 0x00, 0x70, 0x00,
  0x1C, 0x00, 0x07, 0x0F, 0xFF, 0x8F, 0xFF, 0xE7, 0xFF, 0xF8, 0xE0, 0xEE,
  0x00, 0x3B, 0x80, 0x1E, 0xE0, 0x07, 0x3C, 0x07, 0x87, 0x83, 0xE1, 0xFF,
  0xF0, 0x3F, 0xF0, 0x03, 0xF0, 0x00, 0x60, 0x00, 0x4E, 0x00, 0x1D, 0x80,
  0x03, 0x30, 0x00, 0x66, 0x00, 0x0C, 0xC0, 0x01, 0x98, 0x00, 0x33, 0x00,
  0x06, 0x60, 0x00, 0xCC, 0x00, 0x19, 0x80, 0x7F, 0x33, 0xFF, 0xE7, 0xFF,
  0xFC, 0xFF, 0x83, 0x9E, 0x00, 0x77, 0x00, 0x0E, 0xE0, 0x01, 0xDC, 0x00,
  0x3B, 0x80, 0x07, 0x70, 0x00, 0x6E, 0x00, 0x0D, 0xC0, 0x01, 0x80, 0x7F,
  0xF3, 0xFF, 0xFF, 0xFF, 0xC1, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x01,
  0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00,
  0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x1F, 0xFE, 0xFF, 0xFD,
  0xFF, 0xE0, 0x0F, 0xFF, 0x87, 0xFF, 0xC3, 0xFF, 0xE0, 0x07, 0x00, 0x03,
  0x80, 0x01, 0xC0, 0x00, 0xE0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x18, 0x00,
  0x0C, 0x00, 0x06, 0x00, 0x03, 0x00, 0x03, 0x80, 0x01, 0xC0, 0x00, 0xE0,
  0x60, 0x70, 0x70, 0x38, 0x38, 0x1C, 0x0E, 0x0C, 0x07, 0xCE, 0x01, 0xFF,
  0x00, 0x7F, 0x00, 0x0F, 0x00, 0x60, 0x19, 0xC0, 0x3B, 0x80, 0xE7, 0x03,
  0xCE, 0x0F, 0x1C, 0x3C, 0x38, 0xF0, 0x71, 0xE0, 0xE7, 0x81, 0xDE, 0x03,
  0xF8, 0x07, 0xE0, 0x0F, 0x80, 0x1F, 0x80, 0x3F, 0x80, 0x77, 0x80, 0xE7,
  0x81, 0xC7, 0xC3, 0x87, 0xC7, 0x07, 0xEE, 0x03, 0xFC, 0x03, 0xB8, 0x00,
  0x30, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x01, 0xC0,
  0x07, 0x00, 0x1C, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70,
  0x01, 0xC0, 0x07, 0x00, 0x18, 0x00, 0x60, 0x01, 0x80, 0x0E, 0x03, 0xFF,
  0xFF, 0x7F, 0xFD, 0xFF, 0x00, 0x06, 0x00, 0xC0, 0x1C, 0x03, 0x80, 0x38,
  0x07, 0x80, 0xF8, 0x0F, 0x01, 0xF0, 0x3E, 0x03, 0xE0, 0x7C, 0x07, 0xC0,
  0xF8, 0x1D, 0x81, 0xB0, 0x3B, 0x07, 0x70, 0x77, 0x0E, 0xE0, 0xEE, 0x19,
  0xC1, 0xDC, 0x33, 0x87, 0x18, 0xE3, 0x0E, 0x31, 0xC6, 0x1C, 0x73, 0x0E,
  0x38, 0xEE, 0x1C, 0xE1, 0xDC, 0x39, 0xC1, 0xB0, 0x73, 0x83, 0xE0, 0x77,
  0x07, 0xC0, 0xEE, 0x0F, 0x01, 0xDC, 0x0E, 0x03, 0xB0, 0x18, 0x03, 0x00,
  0xE0, 0x00, 0xCE, 0x00, 0x0E, 0xF0, 0x00, 0xEF, 0x80, 0x0F, 0xF8, 0x00,
  0x7F, 0xC0, 0x07, 0xEE, 0x00, 0x7E, 0xF0, 0x07, 0xE7, 0x00, 0x7E, 0x38,
  0x07, 0xE1, 0xC0, 0x7E, 0x1E, 0x07, 0xE0, 0xF0, 0x7E, 0x07, 0x87, 0xE0,
  0x3C, 0x7E, 0x01, 0xE7, 0xE0, 0x0F, 0x7E, 0x00, 0x7F, 0xE0, 0x03, 0xFE,
  0x00, 0x1F, 0xE0, 0x00, 0xFC, 0x00, 0x06, 0x00, 0xFE, 0x00, 0x3F, 0xF8,
  0x0F, 0xFF, 0xC1, 0xF0, 0x3E, 0x3C, 0x00, 0xE3, 0x80, 0x0F, 0x78, 0x00,
  0x77, 0x00, 0x07, 0xF0, 0x00, 0x7E, 0x00, 0x07, 0xE0, 0x00, 0x7E, 0x00,
  0x07, 0xE0, 0x00, 0x7E, 0x00, 0x0E, 0xE0, 0x00, 0xEE, 0x00, 0x1C, 0xF0,
  0x03, 0xC7, 0x80, 0x78, 0x7C, 0x0F, 0x83, 0xFF, 0xF0, 0x0F, 0xFC, 0x00,
  0x3F, 0x00, 0x3F, 0x83, 0xFE, 0x1F, 0xFC, 0xE1, 0xE7, 0x03, 0xB8, 0x1D,
  0xC0, 0x6C, 0x03, 0x60, 0x3B, 0x03, 0xD8, 0x3C, 0xFF, 0xC7, 0xFC, 0x7F,
  0x83, 0x80, 0x1C, 0x00, 0xE0, 0x07, 0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00,
  0x30, 0x00, 0x00, 0x7F, 0x00, 0x01, 0xFF, 0xC0, 0x07, 0xFF, 0xE0, 0x0F,
  0xC1, 0xF0, 0x1E, 0x00, 0x78, 0x3C, 0x00, 0x38, 0x38, 0x00, 0x1C, 0x70,
  0x00, 0x1C, 0x70, 0x00, 0x1C, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0,
  0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xF0,
  0x10, 0x1E, 0x70, 0x38, 0x1C, 0x78, 0x3C, 0x3C, 0x3C, 0x1E, 0x78, 0x1E,
  0x0F, 0xF0, 0x1F, 0x07, 0xE0, 0x0F, 0xFF, 0xE0, 0x03, 0xFF, 0xF0, 0x00,
  0xFC, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x0F, 0x00,
  0x00, 0x06, 0x7C, 0x01, 0xFF, 0x03, 0xFF, 0x87, 0x1F, 0x8E, 0x07, 0x9C,
  0x07, 0xB8, 0x07, 0x70, 0x0E, 0xE0, 0x1D, 0xC0, 0x3B, 0x80, 0xF7, 0x07,
  0xCF, 0xFF, 0x1F, 0xF8, 0x3F, 0xE0, 0x77, 0xE0, 0xE3, 0xF1, 0xC1, 0xF3,
  0x81, 0xF7, 0x00, 0xFE, 0x00, 0xF8, 0x00, 0xC0, 0x01, 0xF8, 0x03, 0xFF,
  0x03, 0xFF, 0xC3, 0xC1, 0xC3, 0xC0, 0x01, 0xC0, 0x00, 0xE0, 0x00, 0x78,
  0x00, 0x3F, 0xF0, 0x0F, 0xFE, 0x01, 0xFF, 0x80, 0x03, 0xE0, 0x00, 0x70,
  0x00, 0x3C, 0x00, 0x0E, 0x00, 0x07, 0xC0, 0x07, 0x70, 0x07, 0xBC, 0x0F,
  0x8F, 0xFF, 0x83, 0xFF, 0x80, 0x7F, 0x00, 0xFF, 0xFF, 0xDF, 0xFF, 0xFD,
  0xFF, 0xFF, 0x80, 0xE0, 0x00, 0x1C, 0x00, 0x03, 0x80, 0x00, 0x70, 0x00,
  0x0E, 0x00, 0x01, 0xC0, 0x00, 0x38, 0x00, 0x07, 0x00, 0x00, 0xE0, 0x00,
  0x0C, 0x00, 0x01, 0x80, 0x00, 0x30, 0x00, 0x06, 0x00, 0x00, 0xE0, 0x00,
  0x1C, 0x00, 0x03, 0x80, 0x00, 0x70, 0x00, 0x0E, 0x00, 0x01, 0x80, 0x00,
  0x60, 0x01, 0xB8, 0x00, 0x7E, 0x00, 0x1F, 0x80, 0x07, 0xE0, 0x01, 0xF8,
  0x00, 0x7E, 0x00, 0x1F, 0x80, 0x07, 0xE0, 0x01, 0xF8, 0x00, 0x7E, 0x00,
  0x3B, 0x80, 0x0E, 0xE0, 0x03, 0xB8, 0x00, 0xE7, 0x00, 0x39, 0xC0, 0x1E,
  0x70, 0x07, 0x1E, 0x03, 0xC3, 0xE1, 0xE0, 0x7F, 0xF8, 0x0F, 0xFC, 0x00,
  0xFC, 0x00, 0xE0, 0x03, 0x70, 0x01, 0xF8, 0x01, 0xDC, 0x00, 0xE7, 0x00,
  0xE3, 0x80, 0x71, 0xC0, 0x38, 0xE0, 0x38, 0x38, 0x1C, 0x1C, 0x1E, 0x0E,
  0x0E, 0x03, 0x07, 0x01, 0xC7, 0x00, 0xE3, 0x80, 0x71, 0xC0, 0x1D, 0xC0,
  0x0E, 0xE0, 0x07, 0x70, 0x01, 0xF0, 0x00, 0xF8, 0x00, 0x78, 0x00, 0x1C,
  0x00, 0xE0, 0x06, 0x00, 0x6E, 0x00, 0xE0, 0x0F, 0xF0, 0x0F, 0x00, 0xE7,
  0x01, 0xF0, 0x0E, 0x70, 0x1F, 0x00, 0xE7, 0x01, 0xF0, 0x1C, 0x38, 0x3B,
  0x01, 0xC3, 0x83, 0xB0, 0x1C, 0x38, 0x3B, 0x03, 0x81, 0x87, 0xB8, 0x38,
  0x1C, 0x73, 0x83, 0x01, 0xC7, 0x38, 0x70, 0x1C, 0x73, 0x87, 0x00, 0xCE,
  0x18, 0xE0, 0x0C, 0xE1, 0xCE, 0x00, 0xEC, 0x1C, 0xC0, 0x0F, 0xC1, 0xDC,
  0x00, 0xFC, 0x1D, 0xC0, 0x07, 0x80, 0xD8, 0x00, 0x78, 0x0F, 0x80, 0x07,
  0x80, 0xF0, 0x00, 0x78, 0x0F, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00,
  0x6E, 0x00, 0x1D, 0xE0, 0x07, 0x1E, 0x01, 0xE1, 0xE0, 0x78, 0x1E, 0x1E,
  0x01, 0xC3, 0x80, 0x1C, 0xF0, 0x03, 0xFC, 0x00, 0x3F, 0x00, 0x03, 0xC0,
  0x00, 0x78, 0x00, 0x1F, 0x80, 0x07, 0xF8, 0x01, 0xE7, 0x00, 0x78, 0x70,
  0x1E, 0x0F, 0x07, 0x80, 0xF1, 0xE0, 0x0E, 0x78, 0x01, 0xEE, 0x00, 0x1F,
  0xC0, 0x01, 0x80, 0x60, 0x01, 0xF8, 0x01, 0xDC, 0x00, 0xEF, 0x00, 0xE3,
  0xC0, 0x70, 0xE0, 0x70, 0x38, 0x38, 0x1C, 0x3C, 0x07, 0x1C, 0x03, 0x8E,
  0x00, 0xEE, 0x00, 0x7F, 0x00, 0x1F, 0x80, 0x07, 0x80, 0x03, 0xC0, 0x01,
  0xC0, 0x01, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x70, 0x00, 0x70, 0x00,
  0x18, 0x00, 0x7F, 0xFF, 0xDF, 0xFF, 0xFD, 0xFF, 0xFF, 0x00, 0x03, 0xC0,
  0x00, 0xF0, 0x00, 0x38, 0x00, 0x0E, 0x00, 0x03, 0x80, 0x00, 0xE0, 0x00,
  0x3C, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x00, 0x70, 0x00, 0x1E, 0x00, 0x07,
  0x80, 0x00, 0xE0, 0x00, 0x38, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x00, 0x7F,
  0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xFD, 0xFB, 0xF6, 0x0C, 0x18,
  0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x06,
  0x0C, 0x18, 0x30, 0x60, 0xFF, 0xFF, 0xF8, 0xC0, 0x18, 0x03, 0x80, 0x78,
  0x07, 0x00, 0xE0, 0x0E, 0x01, 0xC0, 0x1C, 0x03, 0x80, 0x38, 0x07, 0x00,
  0xE0, 0x0E, 0x01, 0xC0, 0x18, 0x03, 0x80, 0x70, 0x07, 0x00, 0xE0, 0x0E,
  0x01, 0xC0, 0x38, 0x03, 0xFF, 0xFF, 0xF8, 0x70, 0xE1, 0xC3, 0x87, 0x0E,
  0x1C, 0x38, 0x70, 0xE1, 0xC3, 0x87, 0x0E, 0x1C, 0x38, 0x70, 0xE1, 0xC3,
  0x87, 0xFF, 0xFF, 0xF8, 0x0E, 0x01, 0xE0, 0x7E, 0x1D, 0xE7, 0x1F, 0xC1,
  0xF0, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xC3, 0x87, 0x0E, 0x1C, 0x70,
  0xC0, 0x07, 0xC0, 0xFF, 0x8F, 0xFC, 0xF8, 0xE7, 0x07, 0x70, 0x3B, 0x81,
  0xDC, 0x0E, 0xE0, 0x77, 0x03, 0xB8, 0x0D, 0xE1, 0xE7, 0xFF, 0xBF, 0xFC,
  0x7E, 0x60, 0x60, 0x03, 0x80, 0x0E, 0x00, 0x38, 0x00, 0xE0, 0x03, 0x80,
  0x0E, 0x00, 0x38, 0x00, 0xE7, 0xC3, 0xFF, 0x8F, 0xFF, 0x3E, 0x1E, 0xE0,
  0x3B, 0x80, 0x7E, 0x01, 0xF8, 0x07, 0xE0, 0x1F, 0x80, 0x7E, 0x03, 0xBC,
  0x1E, 0xFF, 0xF3, 0xFF, 0x87, 0xF8, 0x00, 0x07, 0xC0, 0x7F, 0x87, 0xFC,
  0x78, 0x63, 0x80, 0x38, 0x01, 0xC0, 0x0C, 0x00, 0xE0, 0x03, 0x00, 0x1C,
  0x04, 0xF0, 0xF3, 0xFF, 0x0F, 0xF0, 0x3E, 0x00, 0x00, 0x0C, 0x00, 0x1C,
  0x00, 0x38, 0x00, 0x70, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x06, 0x07,
  0xCC, 0x3F, 0xF8, 0xFF, 0xF1, 0xC1, 0xE7, 0x01, 0xCC, 0x03, 0x98, 0x07,
  0x70, 0x0E, 0xE0, 0x1C, 0xC0, 0x39, 0xC0, 0x73, 0xC3, 0xE3, 0xFF, 0xC3,
  0xFF, 0x81, 0xF3, 0x00, 0x07, 0xC0, 0x7F, 0xC3, 0xFF, 0x9E, 0x0E, 0x70,
  0x39, 0x83, 0xCE, 0x7E, 0x3F, 0xE0, 0xFC, 0x03, 0xC0, 0x0E, 0x00, 0xDE,
  0x0F, 0x7F, 0xFC, 0xFF, 0xE0, 0xFE, 0x00, 0x01, 0xF0, 0x3F, 0x07, 0xF0,
  0x78, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0x07, 0xE0, 0xFF,
  0x8F, 0xFE, 0xF8, 0x77, 0x03, 0xF0, 0x1F, 0x80, 0xFC, 0x07, 0xE0, 0x3F,
  0x03, 0xF8, 0x1F, 0xE3, 0xE7, 0xFB, 0x1F, 0x98, 0x78, 0xC0, 0x0E, 0x00,
  0x70, 0x03, 0x80, 0x3C, 0x03, 0xCF, 0xFE, 0x7F, 0xE1, 0xFC, 0x00, 0x60,
  0x07, 0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1C, 0x00,
  0xE3, 0xE7, 0x3F, 0xBB, 0xFD, 0xFC, 0xEF, 0x83, 0x7C, 0x1B, 0xC0, 0xDC,
  0x06, 0xE0, 0x3F, 0x01, 0xF8, 0x0F, 0xC0, 0x7E, 0x03, 0xF0, 0x1F, 0x80,
  0x60, 0xFF, 0x80, 0x37, 0xFF, 0x6D, 0xB6, 0xDB, 0x6C, 0x07, 0x03, 0x81,
  0xC0, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x03, 0x81, 0xC0, 0xE0, 0x70, 0x38,
  0x1C, 0x0E, 0x07, 0x03, 0x81, 0xC0, 0xE0, 0x70, 0x38, 0x1F, 0x0F, 0xC7,
  0xE3, 0xB9, 0xDF, 0xE7, 0xE1, 0xE0, 0x60, 0x03, 0x00, 0x18, 0x00, 0xE0,
  0x07, 0x00, 0x38, 0x19, 0xC1, 0xEC, 0x1F, 0x60, 0xFB, 0x0F, 0x98, 0xF8,
  0xCF, 0x86, 0xF8, 0x3F, 0x81, 0xFE, 0x0F, 0xF8, 0x71, 0xC7, 0x0F, 0x38,
  0x3D, 0xC0, 0xEE, 0x03, 0xF0, 0x1D, 0x80, 0x60, 0x67, 0x77, 0x77, 0x77,
  0x77, 0x77, 0x77, 0x66, 0x66, 0x6E, 0xEE, 0x60, 0xE3, 0x8F, 0x1D, 0xFB,
  0xF3, 0xFF, 0xFF, 0x7E, 0xFC, 0xEF, 0x8E, 0x1D, 0xE1, 0x81, 0xB8, 0x30,
  0x37, 0x06, 0x07, 0xE0, 0xE0, 0xFC, 0x1C, 0x1F, 0x83, 0x83, 0xE0, 0x70,
  0x7E, 0x0E, 0x0F, 0xC1, 0xC0, 0xF0, 0x38, 0x18, 0x03, 0x00, 0xE3, 0xCE,
  0xFE, 0xFF, 0xEF, 0xC6, 0xF8, 0x7F, 0x07, 0xF0, 0x7E, 0x07, 0xE0, 0x7E,
  0x07, 0xE0, 0x7E, 0x07, 0xE0, 0x7E, 0x07, 0xC0, 0x30, 0x07, 0x80, 0xFF,
  0x0F, 0xFC, 0xF0, 0xE7, 0x03, 0x78, 0x1F, 0x80, 0xFC, 0x07, 0xE0, 0x3F,
  0x01, 0x9C, 0x1C, 0xF1, 0xE7, 0xFE, 0x1F, 0xE0, 0x3E, 0x00, 0xC0, 0x0E,
  0x78, 0xDF, 0xCF, 0xFE, 0xF8, 0xFE, 0x07, 0xE0, 0x7E, 0x07, 0xE0, 0x7E,
  0x07, 0xE0, 0x7E, 0x07, 0xE0, 0x7E, 0x0E, 0xFF, 0xEF, 0xFC, 0xFF, 0x0E,
  0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0x07, 0xF1,
  0xFF, 0x3F, 0xF7, 0xC3, 0x78, 0x3F, 0x03, 0xE0, 0x7E, 0x07, 0xE0, 0x7E,
  0x07, 0xE0, 0x7E, 0x07, 0xF0, 0xF7, 0xFF, 0x3F, 0xE0, 0xFE, 0x00, 0x60,
  0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0xC3, 0xDD, 0xFF,
  0xFF, 0xFE, 0x7F, 0x0F, 0xC1, 0xF8, 0x07, 0x00, 0xE0, 0x1C, 0x03, 0x80,
  0x70, 0x0E, 0x01, 0xC0, 0x30, 0x00, 0x00, 0xE0, 0xFF, 0x3F, 0xF7, 0xE7,
  0x70, 0x77, 0x00, 0x7E, 0x03, 0xFC, 0x03, 0xE0, 0x0E, 0x00, 0x6C, 0x0E,
  0xFF, 0xEF, 0xFC, 0x3F, 0x80, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E,
  0x0F, 0xFF, 0xFF, 0xF7, 0xFE, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E,
  0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0xC0,
  0x6E, 0x07, 0xE0, 0x7C, 0x07, 0xC0, 0x7C, 0x07, 0xC0, 0x7C, 0x07, 0xC0,
  0x7E, 0x07, 0xE0, 0x7E, 0x0F, 0xFF, 0xF7, 0xFF, 0x3F, 0x60, 0xC0, 0x37,
  0x01, 0xF8, 0x1C, 0xE0, 0xE7, 0x07, 0x38, 0x70, 0xE3, 0x87, 0x18, 0x19,
  0xC0, 0xEE, 0x07, 0xE0, 0x1F, 0x00, 0xF0, 0x07, 0x80, 0x18, 0x00, 0x00,
  0xE0, 0xC1, 0xF8, 0x78, 0x7E, 0x1E, 0x1F, 0x87, 0x87, 0xE3, 0xE3, 0x98,
  0xF8, 0xE7, 0x36, 0x39, 0xDD, 0xCC, 0x77, 0x77, 0x1D, 0x8D, 0xC7, 0xE3,
  0x60, 0xF0, 0xD8, 0x3C, 0x3E, 0x0F, 0x07, 0x01, 0x81, 0xC0, 0x30, 0x06,
  0xF0, 0x1C, 0xF0, 0x78, 0xE1, 0xE0, 0xE7, 0x81, 0xFE, 0x01, 0xF8, 0x01,
  0xC0, 0x07, 0xC0, 0x1F, 0xC0, 0x73, 0xC3, 0xC3, 0x8F, 0x03, 0x9C, 0x07,
  0xB0, 0x07, 0x00, 0x06, 0xC0, 0x0D, 0xC0, 0x1B, 0xC0, 0x73, 0x80, 0xE7,
  0x83, 0x87, 0x07, 0x0F, 0x1C, 0x0E, 0x38, 0x1E, 0xF0, 0x1D, 0xC0, 0x3F,
  0x80, 0x3E, 0x00, 0x7C, 0x00, 0x70, 0x00, 0xE0, 0x03, 0x80, 0x07, 0x00,
  0x1C, 0x00, 0x38, 0x00, 0x70, 0x01, 0xC0, 0x03, 0x80, 0x06, 0x00, 0x00,
  0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0xC0, 0x1E, 0x00, 0xE0, 0x0E, 0x00,
  0xE0, 0x0F, 0x00, 0x70, 0x07, 0x00, 0x70, 0x07, 0xFF, 0x7F, 0xFB, 0xFF,
  0xC0, 0x03, 0x83, 0xF0, 0xFC, 0x70, 0x1C, 0x06, 0x01, 0x80, 0x60, 0x1C,
  0x07, 0x01, 0xC0, 0x70, 0x1C, 0x1E, 0x0F, 0x83, 0xC0, 0x78, 0x0E, 0x01,
  0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x70, 0x1C, 0x07, 0x00, 0xF8, 0x3F,
  0x03, 0x80, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFC, 0x70, 0x3F, 0x0F, 0xC0, 0x78, 0x0E, 0x03, 0x80, 0xE0, 0x38, 0x0E,
  0x03, 0x80, 0xE0, 0x38, 0x0E, 0x01, 0xE0, 0x78, 0x0F, 0x07, 0x81, 0xC0,
  0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0E, 0x07, 0x87, 0xC3, 0xE0,
  0x70, 0x00, 0x0E, 0x00, 0x3E, 0x0C, 0xFE, 0x1B, 0xDC, 0x77, 0x1C, 0xFC,
  0x3F, 0xD8, 0x3F, 0x00, 0x1C
};

const GFXglyph __comic15pt7bGlyphs[] PROGMEM = {
  {     0,   0,   0,   9,    0,    1 },   // 0x20 ' '
  {     0,   3,  24,   7,    2,  -22 },   // 0x21 '!'
  {     9,   8,   9,  12,    2,  -21 },   // 0x22 '"'
  {    18,  24,  22,  24,    0,  -21 },   // 0x23 '#'
  {    84,  16,  31,  20,    1,  -25 },   // 0x24 '$'
  {   146,  21,  23,  24,    2,  -22 },   // 0x25 '%'
  {   207,  17,  24,  19,    1,  -21 },   // 0x26 '&'
  {   258,   3,   7,  11,    4,  -21 },   // 0x27 '''
  {   261,   8,  29,  11,    2,  -22 },   // 0x28 '('
  {   290,   8,  29,  11,    2,  -22 },   // 0x29 ')'
  {   319,  13,  12,  15,    1,  -22 },   // 0x2A '*'
  {   339,  12,  13,  14,    1,  -15 },   // 0x2B '+'
  {   359,   4,   7,   8,    3,   -1 },   // 0x2C ','
  {   363,   9,   3,  12,    2,   -9 },   // 0x2D '-'
  {   367,   4,   4,   7,    2,   -3 },   // 0x2E '.'
  {   369,  13,  24,  15,    1,  -22 },   // 0x2F '/'
  {   408,  16,  22,  18,    1,  -21 },   // 0x30 '0'
  {   452,   9,  22,  13,    2,  -21 },   // 0x31 '1'
  {   477,  14,  22,  18,    2,  -21 },   // 0x32 '2'
  {   516,  13,  22,  18,    2,  -21 },   // 0x33 '3'
  {   552,  16,  22,  18,    1,  -21 },   // 0x34 '4'
  {   596,  14,  22,  18,    2,  -21 },   // 0x35 '5'
  {   635,  14,  22,  18,    2,  -21 },   // 0x36 '6'
  {   674,  16,  22,  18,    1,  -21 },   // 0x37 '7'
  {   718,  14,  22,  18,    2,  -21 },   // 0x38 '8'
  {   757,  14,  23,  18,    2,  -21 },   // 0x39 '9'
  {   798,   3,  13,   9,    3,  -14 },   // 0x3A ':'
  {   803,   5,  18,   9,    1,  -14 },   // 0x3B ';'
  {   815,   9,  12,  11,    0,  -14 },   // 0x3C '<'
  {   829,  11,  11,  15,    1,  -14 },   // 0x3D '='
  {   845,   9,  13,  11,    1,  -15 },   // 0x3E '>'
  {   860,  13,  22,  15,    1,  -20 },   // 0x3F '?'
  {   896,  23,  25,  27,    2,  -22 },   // 0x40 '@'
  {   968,  17,  22,  21,    2,  -21 },   // 0x41 'A'
  {  1015,  14,  23,  18,    3,  -21 },   // 0x42 'B'
  {  1056,  16,  22,  17,    1,  -21 },   // 0x43 'C'
  {  1100,  16,  22,  21,    3,  -21 },   // 0x44 'D'
  {  1144,  15,  22,  18,    2,  -21 },   // 0x45 'E'
  {  1186,  15,  22,  18,    2,  -21 },   // 0x46 'F'
  {  1228,  18,  22,  20,    1,  -21 },   // 0x47 'G'
  {  1278,  19,  22,  22,    2,  -21 },   // 0x48 'H'
  {  1331,  14,  22,  16,    1,  -21 },   // 0x49 'I'
  {  1370,  17,  24,  19,    1,  -21 },   // 0x4A 'J'
  {  1421,  15,  24,  18,    3,  -21 },   // 0x4B 'K'
  {  1466,  14,  22,  16,    1,  -21 },   // 0x4C 'L'
  {  1505,  23,  23,  26,    2,  -21 },   // 0x4D 'M'
  {  1572,  20,  22,  23,    2,  -21 },   // 0x4E 'N'
  {  1627,  20,  22,  23,    2,  -21 },   // 0x4F 'O'
  {  1682,  13,  22,  15,    1,  -21 },   // 0x50 'P'
  {  1718,  24,  28,  25,    1,  -21 },   // 0x51 'Q'
  {  1802,  15,  22,  18,    2,  -21 },   // 0x52 'R'
  {  1844,  17,  22,  20,    2,  -21 },   // 0x53 'S'
  {  1891,  19,  22,  20,    2,  -21 },   // 0x54 'T'
  {  1944,  18,  22,  21,    2,  -21 },   // 0x55 'U'
  {  1994,  17,  22,  19,    2,  -21 },   // 0x56 'V'
  {  2041,  28,  23,  30,    2,  -21 },   // 0x57 'W'
  {  2122,  19,  22,  21,    1,  -21 },   // 0x58 'X'
  {  2175,  17,  22,  18,    0,  -20 },   // 0x59 'Y'
  {  2222,  19,  22,  20,    1,  -21 },   // 0x5A 'Z'
  {  2275,   7,  27,  11,    3,  -20 },   // 0x5B '['
  {  2299,  11,  24,  16,    3,  -21 },   // 0x5C '\'
  {  2332,   7,  27,  11,    3,  -20 },   // 0x5D ']'
  {  2356,  11,   7,  17,    3,  -22 },   // 0x5E '^'
  {  2366,  19,   2,  18,    0,    4 },   // 0x5F '_'
  {  2371,   6,   7,  16,    2,  -22 },   // 0x60 '`'
  {  2377,  13,  15,  15,    1,  -14 },   // 0x61 'a'
  {  2402,  14,  23,  17,    2,  -22 },   // 0x62 'b'
  {  2443,  13,  15,  15,    1,  -14 },   // 0x63 'c'
  {  2468,  15,  23,  17,    1,  -22 },   // 0x64 'd'
  {  2512,  14,  15,  16,    1,  -14 },   // 0x65 'e'
  {  2539,  12,  25,  15,    1,  -22 },   // 0x66 'f'
  {  2577,  13,  23,  15,    1,  -14 },   // 0x67 'g'
  {  2615,  13,  23,  17,    2,  -22 },   // 0x68 'h'
  {  2653,   3,  21,   8,    3,  -20 },   // 0x69 'i'
  {  2661,   9,  29,  12,    0,  -20 },   // 0x6A 'j'
  {  2694,  13,  23,  16,    2,  -21 },   // 0x6B 'k'
  {  2732,   4,  23,   8,    2,  -22 },   // 0x6C 'l'
  {  2744,  19,  16,  23,    2,  -14 },   // 0x6D 'm'
  {  2782,  12,  15,  15,    2,  -14 },   // 0x6E 'n'
  {  2805,  13,  15,  15,    1,  -14 },   // 0x6F 'o'
  {  2830,  12,  24,  16,    2,  -15 },   // 0x70 'p'
  {  2866,  12,  23,  15,    1,  -14 },   // 0x71 'q'
  {  2901,  11,  15,  14,    2,  -14 },   // 0x72 'r'
  {  2922,  12,  15,  14,    1,  -14 },   // 0x73 's'
  {  2945,  12,  20,  14,    1,  -19 },   // 0x74 't'
  {  2975,  12,  15,  15,    2,  -14 },   // 0x75 'u'
  {  2998,  13,  16,  14,    1,  -14 },   // 0x76 'v'
  {  3024,  18,  15,  20,    1,  -14 },   // 0x77 'w'
  {  3058,  15,  16,  17,    1,  -14 },   // 0x78 'x'
  {  3088,  15,  23,  15,    0,  -14 },   // 0x79 'y'
  {  3132,  13,  15,  16,    2,  -14 },   // 0x7A 'z'
  {  3157,  10,  29,  11,    0,  -22 },   // 0x7B '{'
  {  3194,   3,  29,  12,    5,  -23 },   // 0x7C '|'
  {  3205,  10,  29,  11,    0,  -22 },   // 0x7D '}'
  {  3242,  15,   8,  17,    1,  -14 }
}; // 0x7E '~'

const GFXfont __comic15pt7b PROGMEM = {
  (uint8_t  *)__comic15pt7bBitmaps,
  (GFXglyph *)__comic15pt7bGlyphs,
  0x20, 0x7E, 40
};

// Approx. 3929 bytes


const uint8_t __comic11pt7bBitmaps[] PROGMEM = {
  0x4D, 0xB6, 0xDB, 0x6D, 0xB6, 0xD0, 0x19, 0x00, 0xC7, 0x3C, 0xF3, 0xCF,
  0x3C, 0xC0, 0x01, 0x83, 0x00, 0xE0, 0xC0, 0x30, 0x30, 0x0C, 0x18, 0x7F,
  0xFF, 0xDF, 0xFF, 0xF0, 0x60, 0xC0, 0x18, 0x30, 0x06, 0x0C, 0x03, 0x03,
  0x00, 0xC1, 0xC3, 0xFF, 0xFE, 0xFF, 0xFF, 0x86, 0x06, 0x01, 0x83, 0x00,
  0xC0, 0xC0, 0x30, 0x30, 0x00, 0x06, 0x00, 0x60, 0x06, 0x00, 0xFC, 0x1F,
  0xE3, 0xE0, 0x76, 0x06, 0x60, 0x66, 0x06, 0x60, 0x76, 0x03, 0xF8, 0x1F,
  0xE0, 0x67, 0x06, 0x30, 0x63, 0xC6, 0x3E, 0x6F, 0x7F, 0xE3, 0xF8, 0x06,
  0x00, 0x60, 0x06, 0x00, 0x60, 0x00, 0x20, 0xF0, 0xC3, 0xF1, 0x86, 0x66,
  0x08, 0xCC, 0x19, 0x98, 0x3F, 0x60, 0x3C, 0xC0, 0x03, 0x00, 0x06, 0x00,
  0x18, 0x00, 0x31, 0xE0, 0xC7, 0xE1, 0x98, 0xC6, 0x31, 0x8C, 0x63, 0x30,
  0x7E, 0x60, 0x70, 0x03, 0x80, 0x3C, 0x03, 0x30, 0x19, 0x80, 0xD8, 0x07,
  0xC0, 0x3C, 0x03, 0xC0, 0x3B, 0x33, 0x19, 0xB0, 0x6D, 0x83, 0xEC, 0x0E,
  0x60, 0x73, 0x87, 0x8F, 0xF6, 0x3E, 0x30, 0x00, 0x80, 0xFF, 0xFC, 0x04,
  0x31, 0xCE, 0x31, 0xC6, 0x18, 0x63, 0x8C, 0x30, 0xC3, 0x0E, 0x18, 0x61,
  0x87, 0x0C, 0x38, 0x70, 0xC0, 0xC3, 0x87, 0x0C, 0x18, 0x60, 0xC3, 0x0C,
  0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x71, 0x8E, 0x33, 0x8C, 0x00, 0x18,
  0x0C, 0x3F, 0xFF, 0xF3, 0xC1, 0xB1, 0x9D, 0x86, 0x18, 0x0C, 0x06, 0x1F,
  0xFF, 0xF8, 0xC0, 0x60, 0x30, 0x2D, 0xEC, 0xFF, 0xFC, 0xFC, 0x00, 0x80,
  0xC0, 0x60, 0x60, 0x30, 0x38, 0x18, 0x1C, 0x0C, 0x0E, 0x06, 0x07, 0x03,
  0x03, 0x81, 0x81, 0xC0, 0xC0, 0x60, 0x00, 0x0F, 0x03, 0xFC, 0x70, 0xC6,
  0x06, 0xC0, 0x6C, 0x07, 0xC0, 0x7C, 0x03, 0xC0, 0x3C, 0x07, 0xC0, 0x6C,
  0x06, 0xC0, 0x66, 0x0E, 0x71, 0xC3, 0xF8, 0x1F, 0x00, 0x18, 0xF3, 0xE6,
  0xC1, 0x83, 0x0E, 0x1C, 0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0x7E, 0xFC,
  0x1E, 0x1F, 0xEE, 0x1B, 0x07, 0x01, 0xC0, 0x60, 0x38, 0x1C, 0x0F, 0x07,
  0x07, 0x81, 0x80, 0xE0, 0x30, 0x0C, 0x03, 0xFE, 0xFF, 0xC0, 0x3E, 0x3F,
  0xCC, 0x38, 0x06, 0x01, 0x80, 0x60, 0xF8, 0xF8, 0x1F, 0x00, 0xE0, 0x18,
  0x07, 0x01, 0xE0, 0x6C, 0x3B, 0xFC, 0x3E, 0x00, 0x01, 0x80, 0x38, 0x07,
  0x80, 0x78, 0x0D, 0x81, 0xD8, 0x19, 0x83, 0x18, 0x71, 0x86, 0x18, 0xFF,
  0xFF, 0xFF, 0x01, 0x80, 0x18, 0x01, 0x80, 0x18, 0x01, 0x80, 0x7F, 0xEF,
  0xFD, 0x80, 0x30, 0x06, 0x00, 0xDF, 0x1F, 0xF3, 0xC7, 0x60, 0x6C, 0x0C,
  0x01, 0x80, 0x30, 0x06, 0x81, 0xF8, 0x73, 0xFC, 0x1F, 0x00, 0x03, 0x00,
  0xE0, 0x38, 0x0E, 0x03, 0x80, 0xE0, 0x18, 0x03, 0x78, 0xFF, 0xDC, 0x1B,
  0x01, 0xE0, 0x3C, 0x06, 0xC1, 0xDC, 0x71, 0xFC, 0x1F, 0x00, 0xFF, 0xFF,
  0xFF, 0x00, 0xE0, 0x1C, 0x01, 0x80, 0x38, 0x03, 0x00, 0x70, 0x06, 0x00,
  0x60, 0x0E, 0x00, 0xC0, 0x1C, 0x01, 0x80, 0x18, 0x03, 0x80, 0x30, 0x00,
  0x0F, 0x07, 0xF1, 0xC7, 0x30, 0x66, 0x0C, 0xC1, 0x9C, 0x71, 0xFC, 0x3F,
  0x8E, 0x39, 0x83, 0xF0, 0x3C, 0x07, 0xC0, 0xDC, 0x3B, 0xFE, 0x1F, 0x00,
  0x1F, 0x07, 0xF9, 0xC7, 0x30, 0x7C, 0x07, 0x80, 0xF0, 0x1F, 0x03, 0x70,
  0xE7, 0xFC, 0x7F, 0x80, 0x60, 0x1C, 0x03, 0x01, 0xE0, 0xF8, 0x7C, 0x0E,
  0x00, 0xFC, 0x03, 0xF0, 0x6D, 0x80, 0x00, 0x0D, 0xEC, 0x06, 0x1C, 0x71,
  0x8E, 0x0E, 0x0E, 0x06, 0x04, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0xFF, 0xC0, 0xC0, 0xC0, 0x41, 0xE7, 0xDF, 0x78, 0xE1, 0x80, 0x3C, 0x7F,
  0x31, 0xC0, 0x20, 0x18, 0x0C, 0x06, 0x07, 0x07, 0x8F, 0xCF, 0xC7, 0x83,
  0x00, 0x00, 0x80, 0xE0, 0x60, 0x00, 0x03, 0xF0, 0x03, 0xFF, 0x01, 0xC0,
  0xF0, 0xE0, 0x0E, 0x71, 0xC1, 0x98, 0xF0, 0x76, 0x70, 0x0F, 0xB8, 0x83,
  0xCC, 0x60, 0xF3, 0xB8, 0x6C, 0x7F, 0xFB, 0x8E, 0x7C, 0x60, 0x00, 0x1C,
  0x00, 0x03, 0x80, 0x00, 0x78, 0x38, 0x0F, 0xFE, 0x00, 0xFE, 0x00, 0x00,
  0x40, 0x03, 0x00, 0x1E, 0x00, 0x78, 0x03, 0x60, 0x1D, 0x80, 0x66, 0x03,
  0x98, 0x0C, 0x70, 0x7F, 0xC3, 0xFF, 0x0F, 0x8C, 0x30, 0x39, 0xC0, 0xE6,
  0x01, 0xB8, 0x06, 0x40, 0x08, 0x7E, 0x0F, 0xE1, 0x8E, 0x70, 0xEE, 0x0D,
  0xC1, 0xB8, 0x36, 0x0E, 0xC3, 0x9F, 0xE3, 0xFE, 0x61, 0xEC, 0x0F, 0x80,
  0xF0, 0x3E, 0x1E, 0xFF, 0x9F, 0x80, 0x03, 0xF0, 0x7F, 0x0E, 0x31, 0xC3,
  0x38, 0x03, 0x00, 0x60, 0x06, 0x00, 0xE0, 0x0C, 0x00, 0xC0, 0x0C, 0x00,
  0xC0, 0x0E, 0x06, 0x71, 0xE3, 0xFC, 0x1F, 0x00, 0xE0, 0x07, 0xC0, 0x37,
  0x81, 0x8F, 0x0C, 0x1C, 0x60, 0x33, 0x01, 0xD8, 0x06, 0xC0, 0x3E, 0x00,
  0xF0, 0x07, 0x80, 0x7C, 0x03, 0x60, 0x3B, 0x83, 0x9F, 0xF8, 0x3F, 0x00,
  0xFF, 0xDF, 0xFF, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06, 0x3E, 0xFF,
  0xDF, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x07, 0xFE, 0x7F, 0xC0,
  0xFF, 0x9F, 0xFF, 0x01, 0xE0, 0x0C, 0x01, 0x80, 0x30, 0x06, 0xFE, 0xFF,
  0xDC, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06, 0x00, 0xC0, 0x00,
  0x03, 0xC0, 0x3F, 0xC1, 0xC3, 0x0E, 0x00, 0x30, 0x01, 0xC0, 0x06, 0x00,
  0x38, 0x00, 0xC3, 0xFB, 0x3F, 0xEC, 0xE3, 0xB0, 0x0E, 0xC0, 0x33, 0x01,
  0xCE, 0x1E, 0x1F, 0xF0, 0x3F, 0x00, 0xC0, 0x0F, 0x00, 0x3C, 0x01, 0xB0,
  0x06, 0xC0, 0x1F, 0x00, 0x6C, 0x01, 0xB0, 0x06, 0xC1, 0xFB, 0xFF, 0xEF,
  0xE1, 0xB0, 0x06, 0xC0, 0x1B, 0x00, 0x6C, 0x01, 0xB0, 0x06, 0xC0, 0x18,
  0xFF, 0xFF, 0xF0, 0xC0, 0x30, 0x0C, 0x07, 0x01, 0xC0, 0x70, 0x1C, 0x07,
  0x01, 0xC0, 0x70, 0x0C, 0x03, 0x01, 0xC3, 0xFF, 0xFF, 0xC0, 0x1F, 0xF8,
  0xFF, 0xC0, 0x60, 0x03, 0x00, 0x18, 0x00, 0xC0, 0x06, 0x00, 0x30, 0x01,
  0x80, 0x0C, 0x00, 0x61, 0x83, 0x0C, 0x18, 0x70, 0xC1, 0xCC, 0x07, 0xE0,
  0x1E, 0x00, 0x60, 0x6C, 0x1D, 0x87, 0x31, 0xC6, 0x70, 0xDC, 0x37, 0x07,
  0xC0, 0xF0, 0x1F, 0x03, 0xF0, 0x77, 0x0E, 0xF1, 0xCF, 0x38, 0xF7, 0x0F,
  0x40, 0x60, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06, 0x00, 0xC0, 0x18, 0x07,
  0x00, 0xE0, 0x1C, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x07, 0xFF,
  0x7F, 0xE0, 0x0C, 0x0C, 0x07, 0x03, 0x81, 0xC0, 0xE0, 0x70, 0x78, 0x1E,
  0x1E, 0x0F, 0x87, 0x83, 0x61, 0xE0, 0xD8, 0xCC, 0x36, 0x33, 0x0C, 0x8C,
  0xC7, 0x32, 0x31, 0x8D, 0x8C, 0x63, 0x63, 0x18, 0xD8, 0x6E, 0x1C, 0x1B,
  0x87, 0x06, 0xC1, 0xC1, 0xF0, 0x20, 0x20, 0x60, 0x06, 0xE0, 0x06, 0xF0,
  0x06, 0xF8, 0x06, 0x78, 0x07, 0x6C, 0x07, 0x6E, 0x07, 0x67, 0x07, 0x63,
  0x07, 0x61, 0x87, 0x60, 0xC7, 0x60, 0xE7, 0x60, 0x73, 0x60, 0x3B, 0xE0,
  0x1F, 0xE0, 0x0E, 0x40, 0x06, 0x03, 0xF0, 0x0F, 0xFC, 0x1C, 0x1E, 0x38,
  0x06, 0x30, 0x06, 0x70, 0x07, 0x60, 0x07, 0x60, 0x07, 0xE0, 0x07, 0xC0,
  0x06, 0xC0, 0x06, 0xE0, 0x0E, 0x60, 0x0C, 0x70, 0x1C, 0x38, 0x38, 0x1F,
  0xF0, 0x07, 0xC0, 0x7C, 0x1F, 0xCC, 0x3B, 0x07, 0xC0, 0xF0, 0x3C, 0x0F,
  0x06, 0xC3, 0xBF, 0xCF, 0xC3, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0,
  0x00, 0x03, 0xF0, 0x03, 0xFF, 0x01, 0xE0, 0xE0, 0xE0, 0x1C, 0x70, 0x03,
  0x38, 0x00, 0xEC, 0x00, 0x1B, 0x00, 0x06, 0xC0, 0x01, 0xB0, 0x00, 0x6C,
  0x00, 0x1B, 0x83, 0x06, 0x60, 0xC3, 0x9C, 0x39, 0xC3, 0xC7, 0xE0, 0x7F,
  0xF0, 0x07, 0xEE, 0x00, 0x01, 0xC0, 0x00, 0x78, 0x00, 0x0F, 0x00, 0x01,
  0xC0, 0x00, 0x20, 0x7C, 0x0F, 0xF0, 0x63, 0x86, 0x1C, 0x60, 0x66, 0x06,
  0x60, 0x66, 0x06, 0xE1, 0xCF, 0xF8, 0xFE, 0x0C, 0x70, 0xC3, 0xCE, 0x1E,
  0xE0, 0x7E, 0x07, 0x40, 0x30, 0x03, 0xE0, 0x7F, 0x87, 0x00, 0x70, 0x03,
  0x00, 0x1C, 0x00, 0xFF, 0x01, 0xFE, 0x00, 0x78, 0x01, 0xC0, 0x06, 0x00,
  0x30, 0x01, 0xA0, 0x1D, 0x81, 0xCF, 0xFC, 0x1F, 0x80, 0xFF, 0xFC, 0xFF,
  0xFC, 0x0C, 0x00, 0x18, 0x00, 0x30, 0x00, 0x60, 0x00, 0xC0, 0x01, 0x80,
  0x03, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30, 0x00, 0x70, 0x00,
  0xE0, 0x01, 0xC0, 0x01, 0x00, 0xC0, 0x1E, 0x00, 0xF0, 0x07, 0x80, 0x3C,
  0x01, 0xE0, 0x0F, 0x00, 0x78, 0x03, 0xC0, 0x3E, 0x01, 0xF0, 0x0D, 0x80,
  0x6E, 0x03, 0x30, 0x31, 0xC3, 0x87, 0xF8, 0x0F, 0x80, 0xC0, 0x3C, 0x03,
  0xC0, 0x7C, 0x06, 0xE0, 0xE6, 0x0C, 0x60, 0xC6, 0x1C, 0x71, 0x83, 0x18,
  0x33, 0x83, 0x30, 0x3B, 0x01, 0xF0, 0x1E, 0x01, 0xE0, 0x0C, 0x00, 0xC0,
  0x60, 0x36, 0x03, 0x01, 0xB0, 0x38, 0x0D, 0xC1, 0xE0, 0xE6, 0x0F, 0x06,
  0x30, 0xF8, 0x31, 0x86, 0xC3, 0x8E, 0x36, 0x18, 0x33, 0xB0, 0xC1, 0x99,
  0x8C, 0x0C, 0xC6, 0x60, 0x6E, 0x33, 0x01, 0xE1, 0xB0, 0x0F, 0x0D, 0x80,
  0x78, 0x68, 0x03, 0x81, 0xC0, 0x1C, 0x0E, 0x00, 0x60, 0x0F, 0x80, 0x77,
  0x03, 0x8E, 0x0C, 0x1C, 0x70, 0x3B, 0x80, 0x6C, 0x01, 0xF0, 0x03, 0x80,
  0x1E, 0x00, 0xEC, 0x07, 0x38, 0x38, 0x70, 0xC0, 0xC7, 0x03, 0xB8, 0x07,
  0xC0, 0x0C, 0xC0, 0x1F, 0x00, 0xDC, 0x0E, 0x60, 0x63, 0x87, 0x0C, 0x30,
  0x73, 0x81, 0x98, 0x0E, 0xC0, 0x3E, 0x00, 0xE0, 0x07, 0x00, 0x30, 0x03,
  0x80, 0x18, 0x01, 0xC0, 0x0C, 0x00, 0x60, 0x00, 0xFF, 0xFF, 0xFF, 0xF0,
  0x07, 0x80, 0x38, 0x01, 0xC0, 0x06, 0x00, 0x30, 0x01, 0xC0, 0x0E, 0x00,
  0x30, 0x01, 0xC0, 0x0E, 0x00, 0x30, 0x01, 0x80, 0x0E, 0x00, 0x3F, 0xFF,
  0xFF, 0xFC, 0xFB, 0xEC, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3,
  0x0C, 0x30, 0xC3, 0x0C, 0x3E, 0xF8, 0xC0, 0x60, 0x18, 0x0C, 0x03, 0x01,
  0x80, 0x60, 0x30, 0x1C, 0x06, 0x03, 0x00, 0xC0, 0x60, 0x38, 0x0C, 0x07,
  0x01, 0x80, 0xC0, 0xFB, 0xE1, 0x86, 0x18, 0x61, 0x86, 0x18, 0x61, 0x86,
  0x18, 0x20, 0x82, 0x0C, 0x30, 0xFF, 0xF8, 0x0C, 0x0F, 0x0D, 0xCE, 0x7E,
  0x1E, 0x00, 0xFF, 0xFF, 0xFF, 0xF0, 0xCE, 0x63, 0x30, 0x1F, 0x0F, 0xE7,
  0x1B, 0x86, 0xC1, 0xB0, 0x6C, 0x1B, 0x06, 0xE3, 0xBF, 0xF3, 0xCC, 0xC0,
  0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x78, 0xFF, 0xB8, 0x6C,
  0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x1F, 0x0E, 0xFF, 0x3F, 0x80, 0x1F, 0x1F,
  0xDC, 0x6C, 0x0E, 0x06, 0x03, 0x01, 0x80, 0x61, 0xBF, 0xC7, 0x80, 0x00,
  0x60, 0x0C, 0x01, 0x80, 0x30, 0x06, 0x00, 0xC0, 0x10, 0xFA, 0x3F, 0xCC,
  0x3B, 0x83, 0x60, 0x6C, 0x0D, 0x81, 0xB0, 0x33, 0x8E, 0x7F, 0xE3, 0xE8,
  0x1F, 0x07, 0xF1, 0x83, 0x71, 0xCC, 0xF1, 0xF8, 0x3C, 0x06, 0x02, 0xE0,
  0xEF, 0xF8, 0x7C, 0x00, 0x07, 0x87, 0xC3, 0x03, 0x01, 0x80, 0xC0, 0x61,
  0xFF, 0xFF, 0x8C, 0x06, 0x03, 0x01, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x1C,
  0x0C, 0x00, 0x1F, 0x0F, 0xF7, 0x0F, 0x83, 0xC1, 0xF0, 0x6C, 0x1B, 0x06,
  0xE3, 0x9F, 0x63, 0xD8, 0x06, 0x01, 0x80, 0xE0, 0x73, 0xFC, 0xFC, 0x00,
  0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x3C, 0xDF, 0xBC,
  0x6E, 0x1B, 0x86, 0xC1, 0xB0, 0x6C, 0x1B, 0x06, 0xC1, 0xB0, 0x20, 0xFC,
  0x01, 0xB6, 0xDB, 0x6D, 0xB6, 0x0C, 0x18, 0x00, 0x00, 0xC1, 0x83, 0x87,
  0x0E, 0x1C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0xC7, 0x8F, 0x9B, 0xE3, 0x80,
  0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC1, 0xB0, 0xEC, 0x7B, 0x1E, 0xCF, 0x37,
  0x0F, 0xC3, 0xF0, 0xEE, 0x31, 0xCC, 0x3B, 0x06, 0xC1, 0xC0, 0x20, 0xFF,
  0xFF, 0xFF, 0xFF, 0xF0, 0x67, 0x79, 0x9F, 0xFB, 0x6F, 0x37, 0x98, 0x66,
  0x30, 0xCC, 0x60, 0xF8, 0x61, 0xE0, 0xC3, 0xC1, 0x87, 0xC3, 0x0D, 0x06,
  0x18, 0x67, 0x1F, 0xE7, 0x99, 0xC6, 0x61, 0xB8, 0x6E, 0x1B, 0x06, 0xC1,
  0xF8, 0x34, 0x0C, 0x1E, 0x1F, 0x9C, 0x7C, 0x3C, 0x1E, 0x0F, 0x07, 0x83,
  0xE3, 0xBF, 0x8F, 0x80, 0x40, 0x33, 0xCF, 0xFB, 0xC6, 0xE1, 0xD8, 0x36,
  0x0D, 0x83, 0x61, 0xD8, 0x67, 0xF9, 0xF8, 0x60, 0x18, 0x06, 0x01, 0x80,
  0x60, 0x18, 0x00, 0x1F, 0x9F, 0xDC, 0x7C, 0x3C, 0x1E, 0x0F, 0x07, 0x83,
  0xE3, 0xBF, 0xCF, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00, 0x8E,
  0xFF, 0xF3, 0xC3, 0xC3, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x03, 0x87,
  0xF3, 0xCD, 0xC3, 0x7C, 0x0F, 0xC0, 0x38, 0x06, 0x41, 0x9F, 0xE3, 0xF0,
  0x18, 0x0C, 0x06, 0x03, 0x0F, 0xFF, 0xFC, 0x60, 0x30, 0x18, 0x0C, 0x06,
  0x03, 0x01, 0x80, 0xC0, 0x60, 0x41, 0xF0, 0xF0, 0x78, 0x3C, 0x1E, 0x0F,
  0x07, 0x83, 0x61, 0xBF, 0xCF, 0xE0, 0xC1, 0xE0, 0xF0, 0x6C, 0x76, 0x33,
  0xB8, 0xD8, 0x6C, 0x1C, 0x0E, 0x06, 0x00, 0xC2, 0x1E, 0x38, 0xF1, 0xC7,
  0x8E, 0x3C, 0xD3, 0x76, 0xD9, 0xA6, 0xCF, 0x36, 0x79, 0xE3, 0x87, 0x0C,
  0x30, 0x60, 0x6E, 0x0C, 0xC7, 0x0D, 0xC1, 0xF0, 0x1C, 0x07, 0xC1, 0x9C,
  0x61, 0xD8, 0x1B, 0x01, 0x80, 0xC0, 0x7C, 0x1D, 0x83, 0x38, 0xE3, 0x18,
  0x73, 0x06, 0xE0, 0xF8, 0x0F, 0x01, 0xC0, 0x38, 0x06, 0x01, 0xC0, 0x30,
  0x06, 0x01, 0xC0, 0x30, 0x00, 0x7F, 0xDF, 0xF0, 0x18, 0x0C, 0x07, 0x03,
  0x80, 0xC0, 0x60, 0x38, 0x1F, 0xFF, 0xFC, 0x0E, 0x3C, 0x61, 0x83, 0x06,
  0x0C, 0x18, 0x30, 0x61, 0xC7, 0x0E, 0x0E, 0x0C, 0x18, 0x30, 0x60, 0xC1,
  0x81, 0x83, 0xC3, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF1, 0xF0,
  0x60, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x70, 0xE1, 0x83, 0x0C,
  0x0C, 0x18, 0x70, 0xC1, 0x9E, 0x38, 0x00, 0x38, 0x0F, 0x8F, 0x99, 0xE1,
  0xF0, 0x1C };

const GFXglyph __comic11pt7bGlyphs[] PROGMEM = {
  {     0,   0,   0,   7,    0,    1 },   // 0x20 ' '
  {     0,   3,  19,   5,    1,  -17 },   // 0x21 '!'
  {     8,   6,   7,   9,    1,  -16 },   // 0x22 '"'
  {    14,  18,  17,  19,    0,  -16 },   // 0x23 '#'
  {    53,  12,  24,  15,    1,  -19 },   // 0x24 '$'
  {    89,  15,  18,  18,    2,  -17 },   // 0x25 '%'
  {   123,  13,  18,  14,    1,  -16 },   // 0x26 '&'
  {   153,   2,   7,   9,    3,  -16 },   // 0x27 '''
  {   155,   6,  23,   8,    1,  -17 },   // 0x28 '('
  {   173,   6,  23,   8,    1,  -17 },   // 0x29 ')'
  {   191,   9,   8,  12,    1,  -15 },   // 0x2A '*'
  {   200,   9,   8,  11,    1,  -10 },   // 0x2B '+'
  {   209,   3,   5,   6,    2,   -1 },   // 0x2C ','
  {   211,   7,   2,   9,    1,   -6 },   // 0x2D '-'
  {   213,   2,   3,   5,    2,   -2 },   // 0x2E '.'
  {   214,   9,  18,  11,    1,  -16 },   // 0x2F '/'
  {   235,  12,  17,  13,    1,  -16 },   // 0x30 '0'
  {   261,   7,  17,  10,    2,  -16 },   // 0x31 '1'
  {   276,  10,  17,  13,    2,  -16 },   // 0x32 '2'
  {   298,  10,  17,  13,    2,  -16 },   // 0x33 '3'
  {   320,  12,  17,  13,    1,  -16 },   // 0x34 '4'
  {   346,  11,  17,  13,    1,  -16 },   // 0x35 '5'
  {   370,  11,  17,  13,    1,  -16 },   // 0x36 '6'
  {   394,  12,  17,  13,    1,  -16 },   // 0x37 '7'
  {   420,  11,  17,  13,    1,  -16 },   // 0x38 '8'
  {   444,  11,  18,  13,    1,  -16 },   // 0x39 '9'
  {   469,   2,  10,   7,    2,  -10 },   // 0x3A ':'
  {   472,   3,  13,   7,    1,  -10 },   // 0x3B ';'
  {   477,   7,   9,   8,    0,  -10 },   // 0x3C '<'
  {   485,   8,   8,  11,    1,  -10 },   // 0x3D '='
  {   493,   7,  10,   8,    1,  -11 },   // 0x3E '>'
  {   502,   9,  17,  12,    1,  -15 },   // 0x3F '?'
  {   522,  18,  18,  20,    1,  -17 },   // 0x40 '@'
  {   563,  14,  17,  16,    1,  -16 },   // 0x41 'A'
  {   593,  11,  18,  14,    2,  -16 },   // 0x42 'B'
  {   618,  12,  17,  13,    1,  -16 },   // 0x43 'C'
  {   644,  13,  17,  16,    2,  -16 },   // 0x44 'D'
  {   672,  11,  17,  14,    2,  -16 },   // 0x45 'E'
  {   696,  11,  17,  13,    2,  -16 },   // 0x46 'F'
  {   720,  14,  17,  15,    1,  -16 },   // 0x47 'G'
  {   750,  14,  17,  17,    2,  -16 },   // 0x48 'H'
  {   780,  10,  17,  12,    1,  -16 },   // 0x49 'I'
  {   802,  13,  17,  15,    1,  -16 },   // 0x4A 'J'
  {   830,  11,  17,  13,    2,  -16 },   // 0x4B 'K'
  {   854,  11,  17,  12,    1,  -16 },   // 0x4C 'L'
  {   878,  18,  18,  19,    1,  -16 },   // 0x4D 'M'
  {   919,  16,  17,  18,    1,  -16 },   // 0x4E 'N'
  {   953,  16,  17,  18,    1,  -16 },   // 0x4F 'O'
  {   987,  10,  17,  11,    1,  -16 },   // 0x50 'P'
  {  1009,  18,  22,  19,    1,  -16 },   // 0x51 'Q'
  {  1059,  12,  17,  14,    1,  -16 },   // 0x52 'R'
  {  1085,  13,  17,  15,    1,  -16 },   // 0x53 'S'
  {  1113,  15,  17,  15,    1,  -16 },   // 0x54 'T'
  {  1145,  13,  17,  16,    2,  -16 },   // 0x55 'U'
  {  1173,  12,  17,  14,    2,  -16 },   // 0x56 'V'
  {  1199,  21,  17,  23,    2,  -16 },   // 0x57 'W'
  {  1244,  14,  17,  16,    1,  -16 },   // 0x58 'X'
  {  1274,  13,  18,  14,    0,  -16 },   // 0x59 'Y'
  {  1304,  14,  17,  15,    1,  -16 },   // 0x5A 'Z'
  {  1334,   6,  21,   8,    2,  -15 },   // 0x5B '['
  {  1350,   9,  18,  12,    2,  -15 },   // 0x5C '\'
  {  1371,   6,  21,   8,    2,  -15 },   // 0x5D ']'
  {  1387,   9,   6,  13,    2,  -17 },   // 0x5E '^'
  {  1394,  14,   2,  14,    0,    3 },   // 0x5F '_'
  {  1398,   4,   5,  12,    2,  -17 },   // 0x60 '`'
  {  1401,  10,  11,  11,    1,  -10 },   // 0x61 'a'
  {  1415,  10,  18,  13,    2,  -17 },   // 0x62 'b'
  {  1438,   9,  11,  11,    1,  -10 },   // 0x63 'c'
  {  1451,  11,  18,  13,    1,  -17 },   // 0x64 'd'
  {  1476,  11,  11,  12,    1,  -10 },   // 0x65 'e'
  {  1492,   9,  19,  11,    1,  -17 },   // 0x66 'f'
  {  1514,  10,  17,  12,    1,  -10 },   // 0x67 'g'
  {  1536,  10,  18,  13,    2,  -17 },   // 0x68 'h'
  {  1559,   3,  16,   6,    2,  -15 },   // 0x69 'i'
  {  1565,   7,  21,   9,    0,  -14 },   // 0x6A 'j'
  {  1584,  10,  18,  12,    2,  -16 },   // 0x6B 'k'
  {  1607,   2,  18,   6,    2,  -17 },   // 0x6C 'l'
  {  1612,  15,  11,  17,    1,  -10 },   // 0x6D 'm'
  {  1633,  10,  11,  12,    1,  -10 },   // 0x6E 'n'
  {  1647,   9,  11,  12,    1,  -10 },   // 0x6F 'o'
  {  1660,  10,  18,  12,    1,  -11 },   // 0x70 'p'
  {  1683,   9,  17,  11,    1,  -10 },   // 0x71 'q'
  {  1703,   8,  11,  11,    2,  -10 },   // 0x72 'r'
  {  1714,  10,  11,  11,    0,  -10 },   // 0x73 's'
  {  1728,   9,  15,  10,    1,  -14 },   // 0x74 't'
  {  1745,   9,  11,  11,    1,  -10 },   // 0x75 'u'
  {  1758,   9,  11,  11,    1,  -10 },   // 0x76 'v'
  {  1771,  13,  11,  15,    1,  -10 },   // 0x77 'w'
  {  1789,  11,  11,  13,    1,  -10 },   // 0x78 'x'
  {  1805,  11,  17,  11,    0,  -10 },   // 0x79 'y'
  {  1829,  10,  11,  12,    1,  -10 },   // 0x7A 'z'
  {  1843,   7,  23,   8,    0,  -17 },   // 0x7B '{'
  {  1864,   2,  22,   9,    4,  -17 },   // 0x7C '|'
  {  1870,   7,  23,   8,    0,  -17 },   // 0x7D '}'
  {  1891,  11,   5,  13,    1,   -9 } }; // 0x7E '~'

const GFXfont __comic11pt7b PROGMEM = {
  (uint8_t  *)__comic11pt7bBitmaps,
  (GFXglyph *)__comic11pt7bGlyphs,
  0x20, 0x7E, 31 };

// Approx. 2570 bytes

const uint8_t __comic9pt7bBitmaps[] PROGMEM = {
  0xFF, 0xFF, 0xFF, 0x3C, 0xCE, 0xF7, 0xBD, 0xEC, 0x02, 0x08, 0x0C, 0x30,
  0x18, 0x63, 0xFF, 0xF7, 0xFF, 0xE1, 0x86, 0x02, 0x08, 0x0C, 0x30, 0xFF,
  0xFD, 0xFF, 0xF8, 0x41, 0x01, 0x86, 0x03, 0x0C, 0x04, 0x18, 0x00, 0x0C,
  0x03, 0x01, 0xF0, 0xFE, 0x6C, 0x1B, 0x04, 0xC1, 0xB0, 0x7F, 0x0F, 0xE0,
  0xDC, 0x33, 0x0C, 0xF3, 0x6F, 0xF9, 0xF8, 0x0C, 0x03, 0x00, 0xC0, 0x30,
  0xC3, 0xC4, 0x33, 0x61, 0x9B, 0x07, 0xB0, 0x3D, 0x80, 0x08, 0x00, 0xC0,
  0x04, 0xF0, 0x67, 0xC2, 0x62, 0x33, 0x31, 0x0F, 0x88, 0x78, 0x0E, 0x03,
  0xC1, 0xB0, 0x68, 0x1E, 0x07, 0x03, 0xC9, 0x9B, 0xC6, 0xE0, 0xE8, 0x3B,
  0x0E, 0xFE, 0xCF, 0x10, 0xFC, 0x19, 0xCC, 0xC6, 0x23, 0x18, 0xC6, 0x31,
  0x8C, 0x21, 0x8C, 0x38, 0xC0, 0xC7, 0x18, 0x63, 0x0C, 0x63, 0x18, 0xC6,
  0x31, 0x8C, 0xC6, 0xE6, 0x00, 0x08, 0x08, 0xEF, 0x7F, 0x1C, 0x36, 0x63,
  0x18, 0x18, 0x18, 0x7F, 0x7F, 0x18, 0x18, 0x18, 0x7E, 0xFF, 0xF0, 0xF0,
  0x03, 0x02, 0x06, 0x04, 0x0C, 0x0C, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60,
  0xC0, 0xC0, 0x80, 0x1E, 0x3F, 0x98, 0xF8, 0x3C, 0x1C, 0x06, 0x03, 0x01,
  0x81, 0xE0, 0xF0, 0x7C, 0x67, 0xF1, 0xF0, 0x18, 0xC7, 0x16, 0x18, 0x41,
  0x04, 0x30, 0xC3, 0x04, 0x7F, 0xF0, 0x1E, 0x1F, 0x98, 0xC8, 0x30, 0x10,
  0x18, 0x18, 0x38, 0x38, 0x30, 0x10, 0x18, 0x0F, 0xF3, 0xFC, 0x3C, 0x3F,
  0x98, 0xC0, 0x20, 0x30, 0x78, 0x70, 0x0E, 0x03, 0x00, 0xF0, 0x5C, 0x67,
  0xF1, 0xE0, 0x03, 0x00, 0xC0, 0x70, 0x34, 0x09, 0x06, 0x43, 0x10, 0x84,
  0x7F, 0xFF, 0xF0, 0x10, 0x04, 0x01, 0x00, 0x40, 0xFF, 0xBF, 0x90, 0x08,
  0x0D, 0xE7, 0xFB, 0x87, 0x83, 0x01, 0x80, 0xF0, 0x78, 0x67, 0xF1, 0xE0,
  0x0C, 0x0E, 0x0E, 0x06, 0x06, 0x03, 0x03, 0x79, 0xFE, 0xC3, 0xE0, 0xF0,
  0x7C, 0x67, 0xF1, 0xF0, 0xFF, 0xFF, 0xE0, 0x38, 0x0C, 0x06, 0x01, 0x80,
  0xC0, 0x30, 0x18, 0x06, 0x01, 0x00, 0xC0, 0x30, 0x08, 0x00, 0x3E, 0x3F,
  0x98, 0xC8, 0x66, 0x33, 0xF0, 0xF8, 0xC6, 0xC1, 0xE0, 0xF0, 0x7C, 0x77,
  0xF1, 0xF0, 0x3E, 0x3F, 0xB8, 0xF8, 0x3C, 0x1E, 0x0F, 0x8E, 0xFF, 0x3D,
  0x81, 0x80, 0xC0, 0xC1, 0xC3, 0xC1, 0x80, 0xA0, 0x0B, 0x4C, 0x00, 0x02,
  0xDA, 0x00, 0x08, 0x63, 0x18, 0xE0, 0xC1, 0x82, 0xFF, 0xFC, 0x00, 0x00,
  0x1F, 0xFF, 0x80, 0xC3, 0x04, 0x77, 0xFB, 0x90, 0x3C, 0x7E, 0x47, 0x03,
  0x01, 0x01, 0x03, 0x07, 0x1F, 0x3C, 0x10, 0x00, 0x30, 0x30, 0x0F, 0xC0,
  0x7F, 0xC3, 0x83, 0x98, 0x07, 0x67, 0x0F, 0x38, 0x1C, 0x88, 0x76, 0x63,
  0xDF, 0xFF, 0x3B, 0xE6, 0x00, 0x18, 0x00, 0x38, 0x30, 0x7F, 0xC0, 0x7C,
  0x00, 0x01, 0x00, 0x60, 0x1E, 0x03, 0xC0, 0xD8, 0x1B, 0x06, 0x60, 0xFC,
  0x3F, 0xCF, 0x19, 0x83, 0x30, 0x6C, 0x07, 0x80, 0xC0, 0xF8, 0x7F, 0x31,
  0x98, 0x6C, 0x36, 0x1B, 0x19, 0xF8, 0xFE, 0x41, 0xA0, 0x70, 0xEF, 0xE7,
  0xC0, 0x07, 0x87, 0xF3, 0x8C, 0xC0, 0x60, 0x18, 0x0C, 0x03, 0x00, 0xC0,
  0x30, 0x0C, 0x1B, 0x8E, 0x7F, 0x0F, 0x00, 0xC0, 0x3C, 0x09, 0xC2, 0x1C,
  0xC3, 0xB0, 0x6C, 0x0F, 0x03, 0x80, 0xE0, 0x38, 0x1F, 0x0E, 0xFF, 0x1F,
  0x80, 0xFF, 0xBF, 0xF4, 0x01, 0x00, 0x40, 0x30, 0x0F, 0xFB, 0xFE, 0xC0,
  0x30, 0x0C, 0x03, 0x00, 0x7F, 0x9F, 0xE0, 0xFF, 0x7F, 0xE0, 0x10, 0x08,
  0x04, 0x03, 0xF9, 0xFC, 0xC0, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x0F,
  0x03, 0xF0, 0xE3, 0x38, 0x06, 0x01, 0x80, 0x31, 0xFE, 0xFF, 0x98, 0xD0,
  0x1B, 0x06, 0x61, 0xC7, 0xF0, 0x78, 0x00, 0x40, 0x34, 0x03, 0x40, 0x34,
  0x03, 0x40, 0x34, 0x03, 0x43, 0xF7, 0xFE, 0x7C, 0x24, 0x02, 0xC0, 0x2C,
  0x03, 0xC0, 0x3C, 0x03, 0xFF, 0xFF, 0x18, 0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0x10, 0xFF, 0xFF, 0x3F, 0xCF, 0xF0, 0x20, 0x08, 0x02,
  0x00, 0x80, 0x20, 0x08, 0x06, 0x31, 0x8C, 0x63, 0x98, 0x7C, 0x0F, 0x00,
  0xC1, 0x61, 0xB1, 0x99, 0xCD, 0xC7, 0xC3, 0xC1, 0xC0, 0xF0, 0x6C, 0x37,
  0x19, 0xCC, 0x7E, 0x0C, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01,
  0x80, 0xC0, 0x60, 0x30, 0x18, 0x0F, 0xF7, 0xF8, 0x18, 0x20, 0xE1, 0xC3,
  0x87, 0x0E, 0x1C, 0x38, 0x50, 0xB1, 0x46, 0xCD, 0x9B, 0x36, 0x6C, 0x99,
  0x96, 0x6C, 0x58, 0xB1, 0xC3, 0xC7, 0x0F, 0x0C, 0x3C, 0x20, 0x40, 0xC0,
  0x37, 0x01, 0xB8, 0x0D, 0xE0, 0x3D, 0x81, 0xE6, 0x0F, 0x30, 0x78, 0xC3,
  0xC3, 0x1E, 0x0C, 0xF0, 0x37, 0x81, 0xFC, 0x07, 0x60, 0x18, 0x0F, 0xC0,
  0xFF, 0x0E, 0x1C, 0xE0, 0x66, 0x01, 0xE0, 0x0F, 0x00, 0x78, 0x02, 0xC0,
  0x36, 0x01, 0xB8, 0x18, 0xE1, 0xC3, 0xFC, 0x0F, 0x80, 0xF8, 0xFE, 0xC6,
  0xC3, 0xC3, 0xC3, 0xC6, 0xFE, 0xF8, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x07,
  0xC0, 0x7F, 0xC3, 0x83, 0x18, 0x06, 0xC0, 0x1B, 0x00, 0x3C, 0x00, 0xE0,
  0x03, 0xC0, 0x0F, 0x0C, 0x36, 0x31, 0x9C, 0x6E, 0x3F, 0xF0, 0x3F, 0xC0,
  0x03, 0x80, 0x07, 0x00, 0x0C, 0x00, 0x10, 0xF8, 0x3F, 0x8C, 0x73, 0x0E,
  0xC1, 0xB0, 0x6C, 0x1B, 0x0C, 0xFE, 0x3F, 0x0C, 0xF3, 0x0E, 0xC1, 0xF0,
  0x30, 0x0F, 0x83, 0xF8, 0xC0, 0x30, 0x07, 0x00, 0x7E, 0x07, 0xF0, 0x0E,
  0x00, 0x60, 0x0F, 0x03, 0x70, 0xE7, 0xF8, 0x7C, 0x00, 0xFF, 0xFF, 0xFF,
  0x04, 0x00, 0x40, 0x04, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60,
  0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x40, 0x38, 0x0F, 0x01, 0xE0, 0x3C,
  0x07, 0x80, 0xF0, 0x1E, 0x03, 0xC0, 0x6C, 0x0D, 0x83, 0x38, 0xE3, 0xF8,
  0x3E, 0x00, 0xC0, 0x78, 0x19, 0x03, 0x30, 0x46, 0x18, 0xC3, 0x08, 0x41,
  0x98, 0x33, 0x06, 0x40, 0x78, 0x0F, 0x01, 0xC0, 0x18, 0x00, 0xC0, 0xC0,
  0xE0, 0x60, 0xD8, 0x70, 0x6C, 0x38, 0x36, 0x14, 0x31, 0x1A, 0x18, 0xCD,
  0x88, 0x66, 0xCC, 0x36, 0x66, 0x0B, 0x12, 0x05, 0x0B, 0x03, 0x87, 0x01,
  0xC3, 0x80, 0xE1, 0xC0, 0xC0, 0x3C, 0x0D, 0xC3, 0x18, 0xE1, 0x98, 0x1E,
  0x03, 0x80, 0x70, 0x1F, 0x07, 0x30, 0xC6, 0x30, 0x6C, 0x07, 0x00, 0xC0,
  0xC0, 0x7C, 0x0D, 0x83, 0x18, 0x63, 0x18, 0x33, 0x06, 0xC0, 0x78, 0x07,
  0x00, 0xC0, 0x18, 0x06, 0x00, 0xC0, 0x30, 0x06, 0x00, 0xFF, 0xFF, 0xFC,
  0x07, 0x01, 0xC0, 0x70, 0x1C, 0x03, 0x00, 0xC0, 0x30, 0x06, 0x01, 0x80,
  0x60, 0x0F, 0xFF, 0xFF, 0xC0, 0xFF, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88,
  0x88, 0xFF, 0x81, 0x83, 0x03, 0x06, 0x04, 0x0C, 0x18, 0x18, 0x30, 0x20,
  0x60, 0xC0, 0xC1, 0x80, 0xFF, 0x33, 0x33, 0x33, 0x33, 0x31, 0x11, 0x11,
  0xFF, 0x10, 0x71, 0xB6, 0x38, 0x60, 0xFF, 0xF0, 0xC6, 0x31, 0x1E, 0x1F,
  0x9C, 0xCC, 0x6C, 0x36, 0x19, 0x8C, 0xFF, 0x3D, 0x80, 0x40, 0x60, 0x30,
  0x18, 0x0C, 0x06, 0xF3, 0xFD, 0xC6, 0xC1, 0xE0, 0xF0, 0x78, 0x6F, 0xF7,
  0xE0, 0x3C, 0x7E, 0x62, 0xC0, 0xC0, 0xC0, 0xC2, 0x7E, 0x3C, 0x01, 0x80,
  0xC0, 0x60, 0x30, 0x11, 0xE9, 0xFD, 0x86, 0xC1, 0x40, 0xB0, 0x58, 0x67,
  0xF1, 0xE8, 0x3C, 0x3F, 0x38, 0xD9, 0xCB, 0x87, 0x03, 0x04, 0xFE, 0x3E,
  0x00, 0x0E, 0x3C, 0xE1, 0x83, 0x1F, 0xFF, 0x98, 0x30, 0x60, 0xC1, 0x83,
  0x04, 0x00, 0x3E, 0x7F, 0xE3, 0xC3, 0x83, 0x86, 0xC6, 0xFA, 0x72, 0x06,
  0x06, 0x0E, 0xFC, 0xF8, 0xC0, 0xC0, 0x40, 0x40, 0xC0, 0xCE, 0xDF, 0xF3,
  0xE3, 0xC3, 0xC3, 0xC3, 0xC1, 0xC1, 0xF0, 0xAA, 0xAA, 0x80, 0x18, 0x60,
  0x00, 0x08, 0x60, 0x82, 0x08, 0x30, 0xC3, 0x0C, 0x3C, 0xF3, 0x78, 0xE0,
  0x40, 0x40, 0x40, 0x40, 0x43, 0x47, 0x46, 0x4C, 0x58, 0x7C, 0x6E, 0xC6,
  0xC3, 0x41, 0x01, 0xFF, 0xAA, 0xAA, 0xA0, 0xCD, 0xEF, 0xFE, 0xF7, 0x2E,
  0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x3C, 0x63, 0xC6, 0x10, 0xCE, 0xFE, 0xF2,
  0xE2, 0xC2, 0xC3, 0xC3, 0xC3, 0xC3, 0x3C, 0x7E, 0xE6, 0xC2, 0x83, 0xC2,
  0xC6, 0x7E, 0x38, 0xC0, 0xDC, 0xFE, 0xE3, 0xC3, 0xC3, 0xC3, 0xC7, 0xFE,
  0xFC, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x3E, 0xFF, 0x8E, 0x18, 0x70, 0xF1,
  0xFF, 0x7E, 0x0C, 0x10, 0x20, 0x40, 0x80, 0xCF, 0xFF, 0x9E, 0x3C, 0x18,
  0x30, 0x60, 0xC0, 0x07, 0x3F, 0x7B, 0x60, 0x7C, 0x1E, 0x03, 0xFF, 0x7E,
  0x30, 0x60, 0xC7, 0xFF, 0xE6, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x80, 0xC3,
  0xC3, 0xC2, 0xC2, 0xC2, 0xC2, 0xC2, 0xFE, 0x7E, 0x82, 0xC6, 0xC6, 0x46,
  0x6C, 0x6C, 0x38, 0x38, 0x30, 0x84, 0x79, 0x8F, 0x31, 0x6F, 0x6D, 0xED,
  0xA5, 0x1C, 0xA3, 0x1C, 0x63, 0x00, 0x41, 0xB1, 0xCD, 0xC3, 0xC1, 0x81,
  0xE1, 0x99, 0x86, 0x81, 0x00, 0xC1, 0xE0, 0xD8, 0xCC, 0x63, 0x61, 0xB0,
  0x70, 0x38, 0x08, 0x0C, 0x06, 0x06, 0x03, 0x01, 0x00, 0xFF, 0xFF, 0x06,
  0x0C, 0x08, 0x18, 0x30, 0xFF, 0xFF, 0x1C, 0xF3, 0x08, 0x20, 0x82, 0x08,
  0x63, 0x06, 0x08, 0x20, 0x82, 0x0C, 0x3C, 0x70, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xE3, 0xC3, 0x04, 0x10, 0x41, 0x04, 0x18, 0x31, 0x86, 0x18, 0x61,
  0x8C, 0xF3, 0x80, 0x30, 0x3C, 0x73, 0x79, 0xF8, 0x70 };

const GFXglyph __comic9pt7bGlyphs[] PROGMEM = {
  {     0,   0,   0,   5,    0,    1 },   // 0x20 ' '
  {     0,   2,  15,   4,    1,  -13 },   // 0x21 '!'
  {     4,   5,   6,   8,    1,  -13 },   // 0x22 '"'
  {     8,  15,  14,  15,    0,  -13 },   // 0x23 '#'
  {    35,  10,  19,  12,    1,  -15 },   // 0x24 '$'
  {    59,  13,  14,  15,    1,  -13 },   // 0x25 '%'
  {    82,  10,  14,  12,    1,  -13 },   // 0x26 '&'
  {   100,   1,   6,   7,    3,  -13 },   // 0x27 '''
  {   101,   5,  18,   7,    1,  -13 },   // 0x28 '('
  {   113,   5,  18,   7,    1,  -13 },   // 0x29 ')'
  {   125,   8,   7,  10,    0,  -13 },   // 0x2A '*'
  {   132,   8,   8,   9,    0,   -9 },   // 0x2B '+'
  {   140,   2,   4,   5,    2,    0 },   // 0x2C ','
  {   141,   6,   2,   8,    1,   -5 },   // 0x2D '-'
  {   143,   2,   2,   4,    1,   -1 },   // 0x2E '.'
  {   144,   8,  15,   9,    1,  -13 },   // 0x2F '/'
  {   159,   9,  14,  11,    1,  -13 },   // 0x30 '0'
  {   175,   6,  14,   8,    1,  -13 },   // 0x31 '1'
  {   186,   9,  14,  11,    1,  -13 },   // 0x32 '2'
  {   202,   9,  14,  11,    1,  -13 },   // 0x33 '3'
  {   218,  10,  14,  11,    0,  -13 },   // 0x34 '4'
  {   236,   9,  14,  11,    1,  -13 },   // 0x35 '5'
  {   252,   9,  14,  11,    1,  -13 },   // 0x36 '6'
  {   268,  10,  14,  11,    1,  -13 },   // 0x37 '7'
  {   286,   9,  14,  11,    1,  -13 },   // 0x38 '8'
  {   302,   9,  15,  11,    1,  -13 },   // 0x39 '9'
  {   319,   2,   8,   5,    2,   -8 },   // 0x3A ':'
  {   321,   3,  11,   5,    1,   -8 },   // 0x3B ';'
  {   326,   6,   8,   7,    0,   -9 },   // 0x3C '<'
  {   332,   7,   7,   9,    1,   -8 },   // 0x3D '='
  {   339,   5,   8,   7,    1,   -9 },   // 0x3E '>'
  {   344,   8,  14,   9,    0,  -12 },   // 0x3F '?'
  {   358,  14,  15,  17,    1,  -13 },   // 0x40 '@'
  {   385,  11,  14,  13,    1,  -13 },   // 0x41 'A'
  {   405,   9,  14,  11,    2,  -13 },   // 0x42 'B'
  {   421,  10,  14,  11,    1,  -13 },   // 0x43 'C'
  {   439,  10,  14,  13,    2,  -13 },   // 0x44 'D'
  {   457,  10,  14,  11,    1,  -13 },   // 0x45 'E'
  {   475,   9,  14,  11,    2,  -13 },   // 0x46 'F'
  {   491,  11,  14,  12,    1,  -13 },   // 0x47 'G'
  {   511,  12,  14,  14,    1,  -13 },   // 0x48 'H'
  {   532,   8,  14,  10,    1,  -13 },   // 0x49 'I'
  {   546,  10,  14,  12,    1,  -13 },   // 0x4A 'J'
  {   564,   9,  14,  11,    2,  -13 },   // 0x4B 'K'
  {   580,   9,  14,  10,    1,  -13 },   // 0x4C 'L'
  {   596,  14,  15,  16,    1,  -13 },   // 0x4D 'M'
  {   623,  13,  14,  14,    1,  -13 },   // 0x4E 'N'
  {   646,  13,  14,  14,    1,  -13 },   // 0x4F 'O'
  {   669,   8,  14,   9,    1,  -13 },   // 0x50 'P'
  {   683,  14,  18,  16,    1,  -13 },   // 0x51 'Q'
  {   715,  10,  14,  11,    1,  -13 },   // 0x52 'R'
  {   733,  11,  14,  12,    1,  -13 },   // 0x53 'S'
  {   753,  12,  14,  12,    1,  -13 },   // 0x54 'T'
  {   774,  11,  14,  13,    1,  -13 },   // 0x55 'U'
  {   794,  11,  14,  12,    1,  -13 },   // 0x56 'V'
  {   814,  17,  14,  19,    1,  -13 },   // 0x57 'W'
  {   844,  11,  14,  13,    1,  -13 },   // 0x58 'X'
  {   864,  11,  15,  11,    0,  -13 },   // 0x59 'Y'
  {   885,  11,  14,  12,    1,  -13 },   // 0x5A 'Z'
  {   905,   4,  18,   7,    2,  -13 },   // 0x5B '['
  {   914,   7,  15,  10,    2,  -13 },   // 0x5C '\'
  {   928,   4,  18,   7,    2,  -13 },   // 0x5D ']'
  {   937,   7,   5,  10,    2,  -13 },   // 0x5E '^'
  {   942,  12,   1,  11,    0,    3 },   // 0x5F '_'
  {   944,   4,   4,  10,    1,  -13 },   // 0x60 '`'
  {   946,   9,   9,   9,    0,   -8 },   // 0x61 'a'
  {   957,   9,  14,  11,    1,  -13 },   // 0x62 'b'
  {   973,   8,   9,   9,    1,   -8 },   // 0x63 'c'
  {   982,   9,  14,  11,    1,  -13 },   // 0x64 'd'
  {   998,   9,   9,  10,    1,   -8 },   // 0x65 'e'
  {  1009,   7,  14,   9,    1,  -13 },   // 0x66 'f'
  {  1022,   8,  14,  10,    1,   -8 },   // 0x67 'g'
  {  1036,   8,  14,  10,    1,  -13 },   // 0x68 'h'
  {  1050,   2,  13,   5,    2,  -12 },   // 0x69 'i'
  {  1054,   6,  18,   7,    0,  -12 },   // 0x6A 'j'
  {  1068,   8,  15,  10,    1,  -13 },   // 0x6B 'k'
  {  1083,   2,  14,   5,    2,  -13 },   // 0x6C 'l'
  {  1087,  12,   9,  14,    1,   -8 },   // 0x6D 'm'
  {  1101,   8,   9,   9,    1,   -8 },   // 0x6E 'n'
  {  1110,   8,   9,   9,    1,   -8 },   // 0x6F 'o'
  {  1119,   8,  15,  10,    1,   -9 },   // 0x70 'p'
  {  1134,   7,  14,   9,    1,   -8 },   // 0x71 'q'
  {  1147,   7,   9,   9,    1,   -8 },   // 0x72 'r'
  {  1155,   8,   9,   9,    0,   -8 },   // 0x73 's'
  {  1164,   7,  12,   8,    1,  -11 },   // 0x74 't'
  {  1175,   8,   9,   9,    1,   -8 },   // 0x75 'u'
  {  1184,   8,   9,   9,    1,   -8 },   // 0x76 'v'
  {  1193,  11,   9,  12,    1,   -8 },   // 0x77 'w'
  {  1206,   9,   9,  11,    1,   -8 },   // 0x78 'x'
  {  1217,   9,  14,   9,    0,   -8 },   // 0x79 'y'
  {  1233,   8,   9,  10,    1,   -8 },   // 0x7A 'z'
  {  1242,   6,  18,   7,    0,  -13 },   // 0x7B '{'
  {  1256,   2,  18,   8,    3,  -14 },   // 0x7C '|'
  {  1261,   6,  18,   7,    0,  -13 },   // 0x7D '}'
  {  1275,   9,   5,  11,    1,   -8 } }; // 0x7E '~'

const GFXfont __comic9pt7b PROGMEM = {
  (uint8_t  *)__comic9pt7bBitmaps,
  (GFXglyph *)__comic9pt7bGlyphs,
  0x20, 0x7E, 25 };

// Approx. 1953 bytes


// 70x8px
const unsigned char  edupraha_only [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x26, 0x40, 0x00, 0x33,
  0x12, 0x90, 0x00, 0x01, 0x15, 0x28, 0xa0, 0x64, 0x2a, 0xaa, 0xa8, 0x65, 0x21, 0x95, 0x28, 0xe8,
  0xae, 0x33, 0x3b, 0xb8, 0x56, 0x51, 0x15, 0x28, 0xac, 0xc4, 0x22, 0xaa, 0xa8, 0x64, 0x21, 0xd8,
  0xc6, 0xaa, 0x66, 0x22, 0xaa, 0xa8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 82x12px
const unsigned char  che [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x20, 0x8f, 0x8e, 0x3e,
  0x7c, 0xf8, 0x70, 0x0f, 0x1f, 0x80, 0x21, 0x20, 0x88, 0x11, 0x08, 0x40, 0x84, 0x88, 0x10, 0x80,
  0x80, 0x40, 0x20, 0x88, 0x10, 0x08, 0x40, 0x84, 0x80, 0x20, 0x01, 0x00, 0x40, 0x20, 0x88, 0x08,
  0x08, 0x40, 0x84, 0x40, 0x20, 0x02, 0x00, 0x40, 0x3f, 0x8f, 0x04, 0x08, 0x78, 0x88, 0x20, 0x20,
  0x02, 0x00, 0x40, 0x20, 0x88, 0x02, 0x08, 0x40, 0xf0, 0x10, 0x20, 0x04, 0x00, 0x40, 0x20, 0x88,
  0x01, 0x08, 0x40, 0x88, 0x08, 0x20, 0x08, 0x00, 0x40, 0x20, 0x88, 0x01, 0x08, 0x40, 0x88, 0x08,
  0x20, 0x08, 0x00, 0x21, 0x20, 0x88, 0x12, 0x08, 0x40, 0x84, 0x90, 0x10, 0x90, 0x00, 0x1e, 0x20,
  0x8f, 0x8c, 0x08, 0x7c, 0x84, 0x61, 0x0f, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

const int pcswitchPin = 2;
const int localswitchPin = 3;
const int commsOutPin = 7;
const int commsInPin = 8;
byte pcswitch = 0;
byte commsIn = 0;

int x = 64;
byte y = 16;
int timestamp = 0; //test mode
bool goingright = true;
bool goingup = true;
byte frame = 0;
byte screensaver; // 0 pro amogus, 1 pro čas a 2 pro datum
unsigned long milisAtStart;
int yearAtStart;
byte monthAtStart;
byte dayAtStart;
byte repeats;

void setup() {
  pinMode(pcswitchPin, OUTPUT);
  pinMode(localswitchPin, INPUT_PULLUP);
  pinMode(commsOutPin, OUTPUT);
  pinMode(commsInPin, INPUT_PULLUP);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  // Clear the buffer
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);

  // Draw a single pixel in white
  // display.drawPixel(10, 10, SSD1306_WHITE);

  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!

  // drawcustombitmap();
  drawSplash();
  display.display();

  Serial.begin(9600);
  Serial.write("Screen module");
  delay(1500);
  char rec[32];
  if (Serial.peek() == 'u') {
    Serial.read();
    switch (Serial.read()) {
      case 'a':
        screensaver = 0;
        // drawCenteredText("screensaver");

        break;
      case 't':
        screensaver = 1;
        // drawCenteredText("time");

        Serial.write("k");
        delay(2000);
        repeats = 0;
        while (Serial.available() > 0) {
          rec[repeats] = Serial.read();
          drawCenteredText(rec);
          delay(100);
          repeats++;
        }
        rec[repeats] = '\0';
        Serial.println("final value is " + String(atol(rec)));
        milisAtStart = (atol(rec) * 1000L) - millis();
        break;
      case 'd':
        screensaver = 2;
        // drawCenteredText("date");

        Serial.write('k');
        delay(2000);
        repeats = 0;
        while (Serial.available() > 0) {
          rec[repeats] = Serial.read();
          drawCenteredText(rec);
          delay(100);
          repeats++;
        }
        rec[repeats] = '\0';
        Serial.println("final value is " + String(atol(rec)));
        milisAtStart = (atol(rec) * 1000L) - millis();


        Serial.println("Clearing Serial buffer...");
        repeats = 0;
        while (Serial.available() > 0) {
          Serial.read();
          repeats++;
        }
        Serial.println("Cleared " + String(repeats) + " chars");

        delay(1000);
        Serial.write('k');
        delay(1000);

        while (Serial.available() < 1) {
          delay(0);
        }

        char incString[11];
        repeats = 0;
        while (Serial.available() > 0) {
          incString[repeats] = Serial.read();
          draw11pCenteredText(incString);
          delay(100);
          repeats++;
        }

        incString[repeats] = '\0';
        Serial.print("Date received as: " + String(incString));
        yearAtStart = atol(String(incString).substring(0, String(incString).indexOf('-')).c_str());
        monthAtStart = atol(String(incString).substring(String(incString).indexOf('-') + 1, String(incString).substring(String(incString).indexOf('-') + 1, String(incString).length()).indexOf('-')).c_str());
        dayAtStart = atol(String(incString).substring(String(incString).substring(String(incString).indexOf('-') + 1, String(incString).length()).indexOf('-'), String(incString).length()).c_str());
    }

  }
  else {
    // drawCenteredText("none");
  }

  delay(1000);

  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...


  //TODO: drawcustomtext();

  //testdrawbitmap();    // Draw a small bitmap image

  //testdrawchar();      // Draw characters of the default font

  //testdrawstyles();    // Draw 'stylized' characters
  //digitalWrite(pcswitchPin, HIGH);
}

void loop() {
  display.clearDisplay();
  pcswitch = digitalRead(localswitchPin);
  // pcswitch = 0 if pushed, 1 if released

  if (pcswitch == 1) {
    if (frame > 80) frame = frame - 80;

    if (timestamp < 1000) {
      if (timestamp < 900) {
        display.clearDisplay();
        drawkris_inverted();
        display.display();
        /* original code
           display.setTextSize(2);
           display.setTextColor(SSD1306_WHITE);
           display.setCursor(32, 12);
           display.println(F("ready."));
           display.display();
        */
      } else {
        pcswitch = digitalRead(localswitchPin);
        drawCenteredText("standby");
        delay(10);
      }
      timestamp++;
    }
    else {
      if (screensaver == 1) {
        doClock();
      }
      else if (screensaver == 2) {
        doCalendar();
      }
      else {
        if (x > 117 || x < 1) {
          goingright = !goingright;
        }
        if (y > 21  || y < 1) {
          goingup    = !goingup;
        }

        if (goingright == true) {
          x = x + 1;
        } else {
          x = x - 1;
        }

        if (goingup == true) {
          y = y + 1;
        } else {
          y = y - 1;
        }

        display.clearDisplay();
        display.drawBitmap(x, y, amogus[frame % 6], 10, 10, WHITE);
        frame++;
        display.display();
        delay(30);
      }
    }



  } else {
    Serial.println("pushed");

    digitalWrite(pcswitchPin, HIGH);
    pcswitch = digitalRead(localswitchPin);
    while (pcswitch == 0) {
      drawCenteredText("henlo");
      delay(100);
      pcswitch = digitalRead(localswitchPin);
    }
    digitalWrite(pcswitchPin, LOW);
    commsIn = digitalRead(commsInPin);
    if (commsIn == 1) {
      // Not ready to play sound, show error message and continue
      frame = 0;
      while (frame < 7) {
        display.clearDisplay();
        display.drawBitmap(0, 0, notready[frame % 2], 128, 32, WHITE);
        display.display();
        delay(500);
        frame++;
      }
      frame = 0;
    }
    else {
      frame = 0;
      drawUnoAndNano();
      digitalWrite(commsOutPin, HIGH);
      while (commsIn == 0) {
        if (frame % 87 == 0) {
          frame = frame - 87;
          drawUnoAndNano();
        }
        display.drawPixel((frame % 87) + 22, 13, BLACK);
        display.drawPixel((frame % 87) + 23, 13, WHITE);
        display.drawPixel((frame % 87) + 24, 13, WHITE);
        display.drawPixel((frame % 87) + 25, 13, WHITE);
        display.display();

        frame++;
        commsIn = digitalRead(commsInPin);
      }
      // connection established, playing sound...
      digitalWrite(commsOutPin, LOW);
    }
    delay(250);

    drawCenteredText("gg, thx.");
    delay(1500);
    timestamp = 0;
  }

}

void drawSplash() {
  display.clearDisplay();
  display.drawBitmap(8, 0, big_chester, 33, 32, WHITE);
  display.drawBitmap(41, 11, che, 82, 13, WHITE);
  display.display();
  delay(750);

  for (int i = 0; i < 7; i++) {

    display.clearDisplay();
    display.drawBitmap(8, 0, big_chester, 33, 32, WHITE);
    display.drawBitmap(48, 15 + i, edupraha_only, 70, 8, WHITE);
    display.fillRect(41, 11 - i, 82, 14, BLACK);
    display.drawBitmap(41, 11 - i, che, 82, 13, WHITE);
    display.display();
    delay(100);
  }

  delay(1000);
}

void doClock() {
  long rnMilis = milisAtStart + millis();
  long rnSecs = rnMilis / 1000;
  long rnMins = rnSecs / 60;
  long rnHours = rnMins / 60;

  rnMilis = rnMilis % 1000;
  rnSecs = rnSecs % 60;
  rnMins = rnMins % 60;
  rnHours = rnHours % 24;

  drawCenteredText(noToDD(rnHours) + ":" + noToDD(rnMins) + ":" + noToDD(rnSecs));
}

void doCalendar() {
  {
    long rnMilis = milisAtStart + millis();
    long rnSecs = rnMilis / 1000;
    long rnMins = rnSecs / 60;
    long rnHours = rnMins / 60;

    byte rnDays = dayAtStart + rnHours / 24;
    byte rnMonth = monthAtStart;
    int rnYear = yearAtStart;


    // Arduino nedokáže udržet přesnej čas o moc dýl než 50 dní, takže
    // se nemůže stát, že by tenhle forloop nestačil. I tak jsem pro
    // jistotu použil 3x loop, aby nebyla ani majinkatá šance.
    for (int i = 0; i < 3; i++) {
      if (rnDays > 28) {
        switch (rnMonth) {
          case 1:
          case 3:
          case 5:
          case 7:
          case 8:
          case 10:
            if (rnDays > 31) {
              rnDays = rnDays - 31;
              rnMonth++;
            }
            break;
          case 4:
          case 6:
          case 9:
          case 11:
            if (rnDays > 30) {
              rnDays = rnDays - 30;
              rnMonth++;
            }
            break;
          case 2:
            if (rnDays > 28) {
              rnDays = rnDays - 28;
              rnMonth++;
            }
            break;
          case 12:
            if (rnDays > 31) {
              rnDays = rnDays - 31;
              rnMonth = 1;
              rnYear++;
            }
            break;
        }
      }
    }

    rnMilis = rnMilis % 1000;
    rnSecs = rnSecs % 60;
    rnMins = rnMins % 60;
    rnHours = rnHours % 24;

    draw11pCenteredText(noToDD(rnDays) + "." + noToDD(rnMonth) + "." + rnYear);
  }
}

String noToDD(long i) { // Double Digits
  if (i < 10)
    return "0" + String(i);
  else
    return String(i);
}

String noToTD(long i) { // Triple Digits
  if (i < 10)
    return "00" + String(i);
  else if (i < 100)
    return "0" + String(i);
  else
    return String(i);
}

void drawCenteredText(String str) {
  unsigned int width;
  unsigned int height;
  int curX;
  int curY;

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setFont(&__comic15pt7b);
  display.setTextSize(1);
  display.getTextBounds(str, 0, 0, &curX, &curY, &width, &height);  // na pozicích curX a curY to vrací souřadnice spodního levýho rohu, což nepotřebuju, ale ty pozice musej bejt vyplněný, tak používám něco, co pak hned přepíšu

  curX = 63 - (width / 2) ;
  curY = 15 + (height / 2)  ;

  if (millis() < 45000)
    Serial.println(str + ", " + String(width) + ", " + String(height) + ", " + String(curX) + ", " + String(curY));

  display.setCursor(curX, curY);
  display.println(str);
  display.display();

  display.setFont();
}

void draw11pCenteredText(String str) {
  unsigned int width;
  unsigned int height;
  int curX;
  int curY;

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setFont(&__comic11pt7b);
  display.getTextBounds(str, 0, 0, &curX, &curY, &width, &height);  // na pozicích curX a curY to vrací souřadnice spodního levýho rohu, což nepotřebuju, ale ty pozice musej bejt vyplněný, tak používám něco, co pak hned přepíšu

  curX = 63 - (width / 2) ;
  curY = 15 + (height / 2)  ;
  
 if (millis() < 45000)
  Serial.println(str + ", " + String(width) + ", " + String(height) + ", " + String(curX) + ", " + String(curY));

  display.setCursor(curX, curY);
  display.println(str);
  display.display();

  display.setFont();
}

void draw9pCenteredText(String str) {
  unsigned int width;
  unsigned int height;
  int curX;
  int curY;

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setFont(&__comic9pt7b);
  display.getTextBounds(str, 0, 0, &curX, &curY, &width, &height);  // na pozicích curX a curY to vrací souřadnice spodního levýho rohu, což nepotřebuju, ale ty pozice musej bejt vyplněný, tak používám něco, co pak hned přepíšu

  curX = 63 - (width / 2) ;
  curY = 15 + (height / 2)  ;
  
 if (millis() < 45000)
  Serial.println(str + ", " + String(width) + ", " + String(height) + ", " + String(curX) + ", " + String(curY));

  display.setCursor(curX, curY);
  display.println(str);
  display.display();

  display.setFont();
}

void drawlogoincorner(void) {
  display.drawBitmap(8, 0, big_chester, 33, 32, WHITE);
}

void drawcustombitmap(void) {
  display.drawBitmap(0, 0, myBitmaplogo, 128, 32, WHITE);
}

void drawkris(void) {
  display.drawBitmap(0, 0, god_dammit_kris, 128, 32, WHITE);
}

void drawkris_inverted(void) {
  display.drawBitmap(0, 0, god_dammit_kris_inverted, 128, 32, WHITE);
}

/* UNUSED CODE
  void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
  }
*/

void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for (int16_t i = 0; i < 256; i++) {
    if (i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);
}

void drawUnoAndNano() {
  display.clearDisplay();
  display.drawBitmap(7, 4, uno, 15, 17, WHITE);
  display.drawBitmap(110, 4, nano, 11, 18, WHITE);
  display.setTextSize(1);
  display.setCursor(18, 24);
  display.println(F("contacting nano"));
  display.drawPixel(108, 30, WHITE);
  display.drawPixel(110, 30, WHITE);
  display.drawPixel(112, 30, WHITE);
  display.display();
}

void testdrawstyles(void) {
  display.clearDisplay();

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0, 0);            // Start at top-left corner
  display.println(F("Hello, world!"));

  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
  display.println(3.141592);

  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);

  display.display();
  delay(2000);
}

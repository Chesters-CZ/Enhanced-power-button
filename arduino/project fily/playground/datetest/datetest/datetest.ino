/**************************************************************************
  This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

  This example is for a 128x32 pixel display using I2C to communicate
  3 pins are required to interface (two I2C and one reset).

  Adafruit invests time and resources providing this open
  source code, please support Adafruit and open-source
  hardware by purchasing products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries,
  with contributions from the open source community.
  BSD license, check license.txt for more information
  All text above, and the splash screen below must be
  included in any redistribution.
 **************************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <Fonts/FreeMono12pt7b.h>
#include <Fonts/FreeSansBoldOblique12pt7b.h>
#include <Fonts/FreeMono18pt7b.h>
#include <Fonts/FreeSansBoldOblique18pt7b.h>
#include <Fonts/FreeMono24pt7b.h>
#include <Fonts/FreeSansBoldOblique24pt7b.h>
#include <Fonts/FreeMono9pt7b.h>
#include <Fonts/FreeSansBoldOblique9pt7b.h>
#include <Fonts/FreeMonoBold12pt7b.h>
#include <Fonts/FreeSansOblique12pt7b.h>
#include <Fonts/FreeMonoBold18pt7b.h>
#include <Fonts/FreeSansOblique18pt7b.h>
#include <Fonts/FreeMonoBold24pt7b.h>
#include <Fonts/FreeSansOblique24pt7b.h>
#include <Fonts/FreeMonoBold9pt7b.h>
#include <Fonts/FreeSansOblique9pt7b.h>
#include <Fonts/FreeMonoBoldOblique12pt7b.h>
#include <Fonts/FreeSerif12pt7b.h>
#include <Fonts/FreeMonoBoldOblique18pt7b.h>
#include <Fonts/FreeSerif18pt7b.h>
#include <Fonts/FreeMonoBoldOblique24pt7b.h>
#include <Fonts/FreeSerif24pt7b.h>
#include <Fonts/FreeMonoBoldOblique9pt7b.h>
#include <Fonts/FreeSerif9pt7b.h>
#include <Fonts/FreeMonoOblique12pt7b.h>
#include <Fonts/FreeSerifBold12pt7b.h>
#include <Fonts/FreeMonoOblique18pt7b.h>
#include <Fonts/FreeSerifBold18pt7b.h>
#include <Fonts/FreeMonoOblique24pt7b.h>
#include <Fonts/FreeSerifBold24pt7b.h>
#include <Fonts/FreeMonoOblique9pt7b.h>
#include <Fonts/FreeSerifBold9pt7b.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeSerifBoldItalic12pt7b.h>
#include <Fonts/FreeSans18pt7b.h>
#include <Fonts/FreeSerifBoldItalic18pt7b.h>
#include <Fonts/FreeSans24pt7b.h>
#include <Fonts/FreeSerifBoldItalic24pt7b.h>
#include <Fonts/FreeSans9pt7b.h>
#include <Fonts/FreeSerifBoldItalic9pt7b.h>
#include <Fonts/FreeSansBold12pt7b.h>
#include <Fonts/FreeSerifItalic12pt7b.h>
#include <Fonts/FreeSansBold18pt7b.h>
#include <Fonts/FreeSerifItalic18pt7b.h>
#include <Fonts/FreeSansBold24pt7b.h>
#include <Fonts/FreeSerifItalic24pt7b.h>
#include <Fonts/FreeSansBold9pt7b.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000
};

const uint8_t __comic15pt7bBitmaps[] PROGMEM = {
  0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xBE, 0xC6, 0xC7, 0xC7,
  0xC7, 0xC7, 0xC7, 0xC7, 0xC7, 0xC6, 0x00, 0x60, 0x18, 0x00, 0x60, 0x38,
  0x00, 0xE0, 0x38, 0x00, 0xE0, 0x30, 0x00, 0xE0, 0x70, 0x3F, 0xFF, 0xFF,
  0x3F, 0xFF, 0xFF, 0x3F, 0xFF, 0xFF, 0x01, 0x80, 0xE0, 0x03, 0x80, 0xE0,
  0x03, 0x80, 0xC0, 0x03, 0x01, 0xC0, 0x07, 0x01, 0xC0, 0x7F, 0xFF, 0xFC,
  0xFF, 0xFF, 0xFE, 0x7F, 0xFF, 0xFE, 0x0E, 0x03, 0x80, 0x0E, 0x03, 0x80,
  0x0C, 0x07, 0x00, 0x1C, 0x07, 0x00, 0x1C, 0x07, 0x00, 0x18, 0x06, 0x00,
  0x00, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x03, 0xF8, 0x07, 0xFE,
  0x1F, 0xFE, 0x1D, 0xCE, 0x39, 0xC0, 0x39, 0xC0, 0x79, 0xC0, 0x79, 0xC0,
  0x3D, 0xC0, 0x3F, 0xF0, 0x1F, 0xFC, 0x07, 0xFE, 0x01, 0xDF, 0x01, 0xC7,
  0x01, 0xC7, 0x01, 0xC7, 0x01, 0xC7, 0x61, 0xCF, 0xF9, 0xDE, 0x7F, 0xFE,
  0x7F, 0xFC, 0x1F, 0xF0, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0, 0x01, 0xC0,
  0x00, 0xC0, 0x00, 0x07, 0x00, 0xE0, 0x38, 0x1F, 0xC3, 0x81, 0xC6, 0x1C,
  0x0E, 0x39, 0xC0, 0x61, 0xCE, 0x03, 0x8E, 0x60, 0x0C, 0x67, 0x00, 0x7F,
  0x30, 0x01, 0xE3, 0x80, 0x00, 0x18, 0x00, 0x01, 0xC0, 0x00, 0x0C, 0x00,
  0x00, 0xE0, 0x00, 0x07, 0x0F, 0x00, 0x71, 0xFE, 0x03, 0x8E, 0x30, 0x38,
  0xE1, 0xC1, 0xC7, 0x0E, 0x1C, 0x38, 0x70, 0xE0, 0xC3, 0x06, 0x07, 0xF0,
  0x30, 0x0F, 0x00, 0x00, 0xE0, 0x00, 0xF8, 0x00, 0xEE, 0x00, 0x77, 0x00,
  0x33, 0x80, 0x19, 0xC0, 0x0F, 0xC0, 0x07, 0xE0, 0x03, 0xE0, 0x03, 0xE0,
  0x03, 0xF0, 0x03, 0xDC, 0x63, 0x8E, 0x33, 0x83, 0xB9, 0x81, 0xDD, 0xC0,
  0x7E, 0xE0, 0x1E, 0x70, 0x0F, 0x38, 0x07, 0x8E, 0x0F, 0xC7, 0xFF, 0xF1,
  0xFF, 0x18, 0x3E, 0x0E, 0x00, 0x03, 0xDF, 0xFF, 0xF0, 0x03, 0x0F, 0x1E,
  0x1C, 0x38, 0x38, 0x70, 0x70, 0x60, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0,
  0xC0, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0x70, 0x70, 0x38, 0x3C, 0x1E,
  0x0F, 0x07, 0xC0, 0xE0, 0xF0, 0x78, 0x38, 0x1C, 0x1C, 0x0E, 0x0E, 0x0E,
  0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x0E, 0x0E,
  0x0E, 0x1C, 0x1C, 0x38, 0xF8, 0xF0, 0xC0, 0x06, 0x00, 0x30, 0x01, 0x81,
  0x8C, 0x0F, 0x7F, 0x3F, 0xFC, 0x3F, 0xC3, 0xF0, 0x3F, 0xC3, 0xCF, 0x18,
  0x38, 0x00, 0xC0, 0x06, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x0F, 0xFE,
  0xFF, 0xFF, 0xFF, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x06, 0x00, 0x37,
  0x76, 0xEC, 0xC0, 0xFF, 0x7F, 0xFF, 0xC0, 0x6E, 0xE6, 0x00, 0x38, 0x01,
  0xC0, 0x1C, 0x00, 0xE0, 0x06, 0x00, 0x70, 0x03, 0x80, 0x38, 0x01, 0xC0,
  0x1C, 0x00, 0xE0, 0x0E, 0x00, 0x70, 0x07, 0x00, 0x38, 0x03, 0x80, 0x1C,
  0x01, 0xC0, 0x0E, 0x00, 0xE0, 0x07, 0x00, 0x30, 0x03, 0x80, 0x18, 0x00,
  0x07, 0xE0, 0x0F, 0xF0, 0x1F, 0xF8, 0x3C, 0x3C, 0x78, 0x1E, 0x70, 0x0E,
  0xE0, 0x0E, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x07,
  0xE0, 0x07, 0xE0, 0x06, 0xE0, 0x0E, 0xE0, 0x0E, 0x70, 0x0E, 0x70, 0x1C,
  0x3C, 0x3C, 0x3F, 0xF8, 0x1F, 0xF0, 0x07, 0xE0, 0x06, 0x0F, 0x0F, 0x8F,
  0xCF, 0xE3, 0x70, 0x38, 0x1C, 0x0E, 0x07, 0x03, 0x81, 0x80, 0xC0, 0x60,
  0x70, 0x38, 0x0C, 0x06, 0x03, 0x0F, 0xFF, 0xFB, 0xFC, 0x07, 0xC0, 0x7F,
  0xC3, 0xFF, 0x9E, 0x1E, 0xF0, 0x39, 0x80, 0xE0, 0x03, 0x80, 0x0E, 0x00,
  0x78, 0x03, 0xC0, 0x3E, 0x01, 0xF0, 0x0F, 0x00, 0xF8, 0x03, 0x80, 0x1C,
  0x00, 0x70, 0x03, 0x80, 0x0E, 0x00, 0x3F, 0xFE, 0xFF, 0xFD, 0xFF, 0xE0,
  0x0F, 0x81, 0xFF, 0x1F, 0xFC, 0xF0, 0xE6, 0x03, 0x80, 0x1C, 0x00, 0xE0,
  0x0E, 0x03, 0xF0, 0x7F, 0x03, 0xF8, 0x03, 0xE0, 0x07, 0x80, 0x1C, 0x00,
  0xE0, 0x07, 0xC0, 0x3F, 0x01, 0xFC, 0x1E, 0xFF, 0xE3, 0xFE, 0x07, 0xC0,
  0x00, 0x30, 0x00, 0x78, 0x00, 0xF8, 0x01, 0xF8, 0x01, 0xB8, 0x03, 0xB8,
  0x07, 0x38, 0x06, 0x38, 0x0E, 0x38, 0x1C, 0x38, 0x1C, 0x38, 0x38, 0x38,
  0x70, 0x38, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x38, 0x00, 0x38,
  0x00, 0x38, 0x00, 0x38, 0x00, 0x38, 0x00, 0x30, 0xFF, 0xFB, 0xFF, 0xF7,
  0xFF, 0x9C, 0x00, 0x60, 0x01, 0x80, 0x0E, 0x7E, 0x3F, 0xFC, 0xFF, 0xFB,
  0xF0, 0xFF, 0x01, 0xF8, 0x07, 0xC0, 0x0C, 0x00, 0x30, 0x01, 0xC0, 0x07,
  0x00, 0x1F, 0x00, 0xEE, 0x0F, 0xBF, 0xFC, 0x7F, 0xE0, 0x7E, 0x00, 0x01,
  0x80, 0x0E, 0x00, 0x78, 0x03, 0xC0, 0x1E, 0x00, 0xF0, 0x03, 0x80, 0x1C,
  0x00, 0x67, 0xC3, 0xFF, 0xCF, 0xFF, 0xBC, 0x1E, 0xC0, 0x3B, 0x00, 0x7C,
  0x01, 0xF8, 0x07, 0xE0, 0x1F, 0x80, 0xEF, 0x07, 0x9F, 0xFC, 0x3F, 0xE0,
  0x3E, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0x00, 0x1E, 0x00, 0x3C,
  0x00, 0x38, 0x00, 0x70, 0x00, 0x70, 0x00, 0xE0, 0x00, 0xE0, 0x01, 0xC0,
  0x01, 0xC0, 0x03, 0xC0, 0x03, 0x80, 0x03, 0x80, 0x07, 0x00, 0x07, 0x00,
  0x0E, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x1C, 0x00, 0x18, 0x00, 0x0F, 0xC0,
  0xFF, 0x87, 0xFF, 0x1E, 0x1E, 0x60, 0x3B, 0x80, 0xEE, 0x03, 0x9E, 0x3C,
  0x7F, 0xE0, 0xFF, 0x03, 0xFF, 0x1F, 0x3E, 0xF0, 0x3B, 0x80, 0x7E, 0x01,
  0xF0, 0x07, 0xE0, 0x1F, 0x80, 0xFF, 0x07, 0x9F, 0xFE, 0x3F, 0xF0, 0x3F,
  0x00, 0x0F, 0xC0, 0xFF, 0x87, 0xFF, 0x9E, 0x1E, 0xE0, 0x3F, 0x80, 0x7C,
  0x01, 0xF0, 0x03, 0xC0, 0x0F, 0x80, 0x7E, 0x01, 0xFE, 0x1F, 0x7F, 0xFC,
  0xFF, 0xE0, 0xFB, 0x80, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1E, 0x01, 0xF0,
  0x3F, 0x01, 0xF0, 0x07, 0x00, 0x00, 0xDF, 0xE0, 0x00, 0x1B, 0xFE, 0x31,
  0xCE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1D, 0xDC, 0xE6, 0x00, 0x01,
  0x81, 0xC1, 0xC1, 0xC3, 0xC3, 0xC3, 0xE0, 0xF8, 0x1E, 0x07, 0x81, 0xE0,
  0x60, 0x7F, 0xFF, 0xFD, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7F, 0xEF, 0xFD, 0xFF, 0x80, 0x60, 0x38, 0x0E, 0x01, 0x80, 0x20, 0x3C,
  0x3E, 0x3F, 0x3F, 0x3E, 0x3E, 0x1E, 0x0C, 0x00, 0x1E, 0x03, 0xFC, 0x3F,
  0xF1, 0xE3, 0xCC, 0x0E, 0x00, 0x38, 0x00, 0xC0, 0x06, 0x00, 0x78, 0x03,
  0xC0, 0x3E, 0x07, 0xE0, 0x7F, 0x07, 0xF8, 0x7F, 0x83, 0xE0, 0x1C, 0x00,
  0x00, 0x06, 0x00, 0x70, 0x03, 0x80, 0x18, 0x00, 0x00, 0xFE, 0x00, 0x0F,
  0xFF, 0x00, 0x3F, 0xFF, 0x80, 0xF8, 0x1F, 0x83, 0xC0, 0x0F, 0x8F, 0x00,
  0x07, 0x9C, 0x1E, 0x07, 0x78, 0x7C, 0x0E, 0xE1, 0xF0, 0x0F, 0xC7, 0x80,
  0x1F, 0x9C, 0x30, 0x3F, 0x38, 0x70, 0x7C, 0x71, 0xC0, 0xF8, 0xE7, 0xC3,
  0xB9, 0xFF, 0xFF, 0x71, 0xFF, 0xFC, 0xE1, 0xE3, 0xE1, 0xE0, 0x00, 0x01,
  0xC0, 0x00, 0x01, 0xC0, 0x00, 0x03, 0xC0, 0x0C, 0x03, 0xE0, 0x7C, 0x03,
  0xFF, 0xF8, 0x01, 0xFF, 0xE0, 0x00, 0xFE, 0x00, 0x00, 0x10, 0x00, 0x1C,
  0x00, 0x1E, 0x00, 0x1F, 0x00, 0x0F, 0x80, 0x0E, 0xE0, 0x07, 0x70, 0x07,
  0x38, 0x07, 0x9C, 0x03, 0x86, 0x03, 0xC3, 0x81, 0xCF, 0xC1, 0xFF, 0xE1,
  0xFF, 0xF0, 0xFF, 0x18, 0x70, 0x0E, 0x78, 0x07, 0x38, 0x03, 0x9C, 0x01,
  0xFC, 0x00, 0x7E, 0x00, 0x3E, 0x00, 0x0C, 0x7F, 0x03, 0xFF, 0x0F, 0xFE,
  0x38, 0x7C, 0xE0, 0x73, 0x80, 0xEE, 0x03, 0xB8, 0x0E, 0xE0, 0x73, 0x81,
  0xCE, 0x1F, 0x3F, 0xF8, 0xFF, 0xE3, 0xFF, 0xCE, 0x0F, 0xB8, 0x0F, 0xE0,
  0x1F, 0x80, 0x7E, 0x07, 0xF8, 0x7E, 0xFF, 0xF3, 0xFF, 0x0F, 0xE0, 0x00,
  0x00, 0x7F, 0x01, 0xFF, 0x03, 0xFF, 0x07, 0x87, 0x0F, 0x03, 0x1E, 0x00,
  0x1C, 0x00, 0x3C, 0x00, 0x38, 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00,
  0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x70, 0x06, 0x70, 0x1E,
  0x78, 0x3E, 0x3F, 0xFC, 0x1F, 0xF0, 0x07, 0xC0, 0xE0, 0x00, 0xF8, 0x00,
  0xFF, 0x00, 0xEF, 0xC0, 0xE3, 0xE0, 0xE0, 0xF8, 0xE0, 0x3C, 0xE0, 0x1E,
  0xE0, 0x0E, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x03, 0xE0, 0x03, 0xE0, 0x03,
  0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x0F, 0xE0, 0x1E, 0xE0, 0x3E, 0xFF, 0xFC,
  0xFF, 0xF0, 0x1F, 0xC0, 0x7F, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x06,
  0x00, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x01, 0xC1, 0xFB, 0xFF,
  0xF7, 0xFF, 0xEF, 0xF0, 0x1C, 0x00, 0x38, 0x00, 0x70, 0x00, 0xE0, 0x01,
  0xC0, 0x03, 0x80, 0x07, 0xFF, 0xE7, 0xFF, 0xC3, 0xFF, 0x00, 0x7F, 0xF0,
  0xFF, 0xF9, 0xFF, 0xFB, 0xC0, 0x76, 0x00, 0x0C, 0x00, 0x18, 0x00, 0x30,
  0x00, 0x60, 0x00, 0xCF, 0xF1, 0xFF, 0xE3, 0xFF, 0xC7, 0x80, 0x0C, 0x00,
  0x38, 0x00, 0x70, 0x00, 0xE0, 0x01, 0xC0, 0x03, 0x80, 0x07, 0x00, 0x0E,
  0x00, 0x0C, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xFF, 0x80, 0x7F, 0xF0, 0x3E,
  0x3C, 0x0E, 0x03, 0x07, 0x80, 0x03, 0xC0, 0x00, 0xE0, 0x00, 0x70, 0x00,
  0x1C, 0x00, 0x07, 0x0F, 0xFF, 0x8F, 0xFF, 0xE7, 0xFF, 0xF8, 0xE0, 0xEE,
  0x00, 0x3B, 0x80, 0x1E, 0xE0, 0x07, 0x3C, 0x07, 0x87, 0x83, 0xE1, 0xFF,
  0xF0, 0x3F, 0xF0, 0x03, 0xF0, 0x00, 0x60, 0x00, 0x4E, 0x00, 0x1D, 0x80,
  0x03, 0x30, 0x00, 0x66, 0x00, 0x0C, 0xC0, 0x01, 0x98, 0x00, 0x33, 0x00,
  0x06, 0x60, 0x00, 0xCC, 0x00, 0x19, 0x80, 0x7F, 0x33, 0xFF, 0xE7, 0xFF,
  0xFC, 0xFF, 0x83, 0x9E, 0x00, 0x77, 0x00, 0x0E, 0xE0, 0x01, 0xDC, 0x00,
  0x3B, 0x80, 0x07, 0x70, 0x00, 0x6E, 0x00, 0x0D, 0xC0, 0x01, 0x80, 0x7F,
  0xF3, 0xFF, 0xFF, 0xFF, 0xC1, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x01,
  0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00,
  0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x1F, 0xFE, 0xFF, 0xFD,
  0xFF, 0xE0, 0x0F, 0xFF, 0x87, 0xFF, 0xC3, 0xFF, 0xE0, 0x07, 0x00, 0x03,
  0x80, 0x01, 0xC0, 0x00, 0xE0, 0x00, 0x70, 0x00, 0x38, 0x00, 0x18, 0x00,
  0x0C, 0x00, 0x06, 0x00, 0x03, 0x00, 0x03, 0x80, 0x01, 0xC0, 0x00, 0xE0,
  0x60, 0x70, 0x70, 0x38, 0x38, 0x1C, 0x0E, 0x0C, 0x07, 0xCE, 0x01, 0xFF,
  0x00, 0x7F, 0x00, 0x0F, 0x00, 0x60, 0x19, 0xC0, 0x3B, 0x80, 0xE7, 0x03,
  0xCE, 0x0F, 0x1C, 0x3C, 0x38, 0xF0, 0x71, 0xE0, 0xE7, 0x81, 0xDE, 0x03,
  0xF8, 0x07, 0xE0, 0x0F, 0x80, 0x1F, 0x80, 0x3F, 0x80, 0x77, 0x80, 0xE7,
  0x81, 0xC7, 0xC3, 0x87, 0xC7, 0x07, 0xEE, 0x03, 0xFC, 0x03, 0xB8, 0x00,
  0x30, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70, 0x01, 0xC0,
  0x07, 0x00, 0x1C, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C, 0x00, 0x70,
  0x01, 0xC0, 0x07, 0x00, 0x18, 0x00, 0x60, 0x01, 0x80, 0x0E, 0x03, 0xFF,
  0xFF, 0x7F, 0xFD, 0xFF, 0x00, 0x06, 0x00, 0xC0, 0x1C, 0x03, 0x80, 0x38,
  0x07, 0x80, 0xF8, 0x0F, 0x01, 0xF0, 0x3E, 0x03, 0xE0, 0x7C, 0x07, 0xC0,
  0xF8, 0x1D, 0x81, 0xB0, 0x3B, 0x07, 0x70, 0x77, 0x0E, 0xE0, 0xEE, 0x19,
  0xC1, 0xDC, 0x33, 0x87, 0x18, 0xE3, 0x0E, 0x31, 0xC6, 0x1C, 0x73, 0x0E,
  0x38, 0xEE, 0x1C, 0xE1, 0xDC, 0x39, 0xC1, 0xB0, 0x73, 0x83, 0xE0, 0x77,
  0x07, 0xC0, 0xEE, 0x0F, 0x01, 0xDC, 0x0E, 0x03, 0xB0, 0x18, 0x03, 0x00,
  0xE0, 0x00, 0xCE, 0x00, 0x0E, 0xF0, 0x00, 0xEF, 0x80, 0x0F, 0xF8, 0x00,
  0x7F, 0xC0, 0x07, 0xEE, 0x00, 0x7E, 0xF0, 0x07, 0xE7, 0x00, 0x7E, 0x38,
  0x07, 0xE1, 0xC0, 0x7E, 0x1E, 0x07, 0xE0, 0xF0, 0x7E, 0x07, 0x87, 0xE0,
  0x3C, 0x7E, 0x01, 0xE7, 0xE0, 0x0F, 0x7E, 0x00, 0x7F, 0xE0, 0x03, 0xFE,
  0x00, 0x1F, 0xE0, 0x00, 0xFC, 0x00, 0x06, 0x00, 0xFE, 0x00, 0x3F, 0xF8,
  0x0F, 0xFF, 0xC1, 0xF0, 0x3E, 0x3C, 0x00, 0xE3, 0x80, 0x0F, 0x78, 0x00,
  0x77, 0x00, 0x07, 0xF0, 0x00, 0x7E, 0x00, 0x07, 0xE0, 0x00, 0x7E, 0x00,
  0x07, 0xE0, 0x00, 0x7E, 0x00, 0x0E, 0xE0, 0x00, 0xEE, 0x00, 0x1C, 0xF0,
  0x03, 0xC7, 0x80, 0x78, 0x7C, 0x0F, 0x83, 0xFF, 0xF0, 0x0F, 0xFC, 0x00,
  0x3F, 0x00, 0x3F, 0x83, 0xFE, 0x1F, 0xFC, 0xE1, 0xE7, 0x03, 0xB8, 0x1D,
  0xC0, 0x6C, 0x03, 0x60, 0x3B, 0x03, 0xD8, 0x3C, 0xFF, 0xC7, 0xFC, 0x7F,
  0x83, 0x80, 0x1C, 0x00, 0xE0, 0x07, 0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00,
  0x30, 0x00, 0x00, 0x7F, 0x00, 0x01, 0xFF, 0xC0, 0x07, 0xFF, 0xE0, 0x0F,
  0xC1, 0xF0, 0x1E, 0x00, 0x78, 0x3C, 0x00, 0x38, 0x38, 0x00, 0x1C, 0x70,
  0x00, 0x1C, 0x70, 0x00, 0x1C, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0,
  0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xE0, 0x00, 0x0E, 0xF0,
  0x10, 0x1E, 0x70, 0x38, 0x1C, 0x78, 0x3C, 0x3C, 0x3C, 0x1E, 0x78, 0x1E,
  0x0F, 0xF0, 0x1F, 0x07, 0xE0, 0x0F, 0xFF, 0xE0, 0x03, 0xFF, 0xF0, 0x00,
  0xFC, 0xF8, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x0F, 0x00,
  0x00, 0x06, 0x7C, 0x01, 0xFF, 0x03, 0xFF, 0x87, 0x1F, 0x8E, 0x07, 0x9C,
  0x07, 0xB8, 0x07, 0x70, 0x0E, 0xE0, 0x1D, 0xC0, 0x3B, 0x80, 0xF7, 0x07,
  0xCF, 0xFF, 0x1F, 0xF8, 0x3F, 0xE0, 0x77, 0xE0, 0xE3, 0xF1, 0xC1, 0xF3,
  0x81, 0xF7, 0x00, 0xFE, 0x00, 0xF8, 0x00, 0xC0, 0x01, 0xF8, 0x03, 0xFF,
  0x03, 0xFF, 0xC3, 0xC1, 0xC3, 0xC0, 0x01, 0xC0, 0x00, 0xE0, 0x00, 0x78,
  0x00, 0x3F, 0xF0, 0x0F, 0xFE, 0x01, 0xFF, 0x80, 0x03, 0xE0, 0x00, 0x70,
  0x00, 0x3C, 0x00, 0x0E, 0x00, 0x07, 0xC0, 0x07, 0x70, 0x07, 0xBC, 0x0F,
  0x8F, 0xFF, 0x83, 0xFF, 0x80, 0x7F, 0x00, 0xFF, 0xFF, 0xDF, 0xFF, 0xFD,
  0xFF, 0xFF, 0x80, 0xE0, 0x00, 0x1C, 0x00, 0x03, 0x80, 0x00, 0x70, 0x00,
  0x0E, 0x00, 0x01, 0xC0, 0x00, 0x38, 0x00, 0x07, 0x00, 0x00, 0xE0, 0x00,
  0x0C, 0x00, 0x01, 0x80, 0x00, 0x30, 0x00, 0x06, 0x00, 0x00, 0xE0, 0x00,
  0x1C, 0x00, 0x03, 0x80, 0x00, 0x70, 0x00, 0x0E, 0x00, 0x01, 0x80, 0x00,
  0x60, 0x01, 0xB8, 0x00, 0x7E, 0x00, 0x1F, 0x80, 0x07, 0xE0, 0x01, 0xF8,
  0x00, 0x7E, 0x00, 0x1F, 0x80, 0x07, 0xE0, 0x01, 0xF8, 0x00, 0x7E, 0x00,
  0x3B, 0x80, 0x0E, 0xE0, 0x03, 0xB8, 0x00, 0xE7, 0x00, 0x39, 0xC0, 0x1E,
  0x70, 0x07, 0x1E, 0x03, 0xC3, 0xE1, 0xE0, 0x7F, 0xF8, 0x0F, 0xFC, 0x00,
  0xFC, 0x00, 0xE0, 0x03, 0x70, 0x01, 0xF8, 0x01, 0xDC, 0x00, 0xE7, 0x00,
  0xE3, 0x80, 0x71, 0xC0, 0x38, 0xE0, 0x38, 0x38, 0x1C, 0x1C, 0x1E, 0x0E,
  0x0E, 0x03, 0x07, 0x01, 0xC7, 0x00, 0xE3, 0x80, 0x71, 0xC0, 0x1D, 0xC0,
  0x0E, 0xE0, 0x07, 0x70, 0x01, 0xF0, 0x00, 0xF8, 0x00, 0x78, 0x00, 0x1C,
  0x00, 0xE0, 0x06, 0x00, 0x6E, 0x00, 0xE0, 0x0F, 0xF0, 0x0F, 0x00, 0xE7,
  0x01, 0xF0, 0x0E, 0x70, 0x1F, 0x00, 0xE7, 0x01, 0xF0, 0x1C, 0x38, 0x3B,
  0x01, 0xC3, 0x83, 0xB0, 0x1C, 0x38, 0x3B, 0x03, 0x81, 0x87, 0xB8, 0x38,
  0x1C, 0x73, 0x83, 0x01, 0xC7, 0x38, 0x70, 0x1C, 0x73, 0x87, 0x00, 0xCE,
  0x18, 0xE0, 0x0C, 0xE1, 0xCE, 0x00, 0xEC, 0x1C, 0xC0, 0x0F, 0xC1, 0xDC,
  0x00, 0xFC, 0x1D, 0xC0, 0x07, 0x80, 0xD8, 0x00, 0x78, 0x0F, 0x80, 0x07,
  0x80, 0xF0, 0x00, 0x78, 0x0F, 0x00, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00,
  0x6E, 0x00, 0x1D, 0xE0, 0x07, 0x1E, 0x01, 0xE1, 0xE0, 0x78, 0x1E, 0x1E,
  0x01, 0xC3, 0x80, 0x1C, 0xF0, 0x03, 0xFC, 0x00, 0x3F, 0x00, 0x03, 0xC0,
  0x00, 0x78, 0x00, 0x1F, 0x80, 0x07, 0xF8, 0x01, 0xE7, 0x00, 0x78, 0x70,
  0x1E, 0x0F, 0x07, 0x80, 0xF1, 0xE0, 0x0E, 0x78, 0x01, 0xEE, 0x00, 0x1F,
  0xC0, 0x01, 0x80, 0x60, 0x01, 0xF8, 0x01, 0xDC, 0x00, 0xEF, 0x00, 0xE3,
  0xC0, 0x70, 0xE0, 0x70, 0x38, 0x38, 0x1C, 0x3C, 0x07, 0x1C, 0x03, 0x8E,
  0x00, 0xEE, 0x00, 0x7F, 0x00, 0x1F, 0x80, 0x07, 0x80, 0x03, 0xC0, 0x01,
  0xC0, 0x01, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x70, 0x00, 0x70, 0x00,
  0x18, 0x00, 0x7F, 0xFF, 0xDF, 0xFF, 0xFD, 0xFF, 0xFF, 0x00, 0x03, 0xC0,
  0x00, 0xF0, 0x00, 0x38, 0x00, 0x0E, 0x00, 0x03, 0x80, 0x00, 0xE0, 0x00,
  0x3C, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x00, 0x70, 0x00, 0x1E, 0x00, 0x07,
  0x80, 0x00, 0xE0, 0x00, 0x38, 0x00, 0x0F, 0x00, 0x01, 0xC0, 0x00, 0x7F,
  0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xFD, 0xFB, 0xF6, 0x0C, 0x18,
  0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x06,
  0x0C, 0x18, 0x30, 0x60, 0xFF, 0xFF, 0xF8, 0xC0, 0x18, 0x03, 0x80, 0x78,
  0x07, 0x00, 0xE0, 0x0E, 0x01, 0xC0, 0x1C, 0x03, 0x80, 0x38, 0x07, 0x00,
  0xE0, 0x0E, 0x01, 0xC0, 0x18, 0x03, 0x80, 0x70, 0x07, 0x00, 0xE0, 0x0E,
  0x01, 0xC0, 0x38, 0x03, 0xFF, 0xFF, 0xF8, 0x70, 0xE1, 0xC3, 0x87, 0x0E,
  0x1C, 0x38, 0x70, 0xE1, 0xC3, 0x87, 0x0E, 0x1C, 0x38, 0x70, 0xE1, 0xC3,
  0x87, 0xFF, 0xFF, 0xF8, 0x0E, 0x01, 0xE0, 0x7E, 0x1D, 0xE7, 0x1F, 0xC1,
  0xF0, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xC3, 0x87, 0x0E, 0x1C, 0x70,
  0xC0, 0x07, 0xC0, 0xFF, 0x8F, 0xFC, 0xF8, 0xE7, 0x07, 0x70, 0x3B, 0x81,
  0xDC, 0x0E, 0xE0, 0x77, 0x03, 0xB8, 0x0D, 0xE1, 0xE7, 0xFF, 0xBF, 0xFC,
  0x7E, 0x60, 0x60, 0x03, 0x80, 0x0E, 0x00, 0x38, 0x00, 0xE0, 0x03, 0x80,
  0x0E, 0x00, 0x38, 0x00, 0xE7, 0xC3, 0xFF, 0x8F, 0xFF, 0x3E, 0x1E, 0xE0,
  0x3B, 0x80, 0x7E, 0x01, 0xF8, 0x07, 0xE0, 0x1F, 0x80, 0x7E, 0x03, 0xBC,
  0x1E, 0xFF, 0xF3, 0xFF, 0x87, 0xF8, 0x00, 0x07, 0xC0, 0x7F, 0x87, 0xFC,
  0x78, 0x63, 0x80, 0x38, 0x01, 0xC0, 0x0C, 0x00, 0xE0, 0x03, 0x00, 0x1C,
  0x04, 0xF0, 0xF3, 0xFF, 0x0F, 0xF0, 0x3E, 0x00, 0x00, 0x0C, 0x00, 0x1C,
  0x00, 0x38, 0x00, 0x70, 0x00, 0xC0, 0x01, 0x80, 0x03, 0x00, 0x06, 0x07,
  0xCC, 0x3F, 0xF8, 0xFF, 0xF1, 0xC1, 0xE7, 0x01, 0xCC, 0x03, 0x98, 0x07,
  0x70, 0x0E, 0xE0, 0x1C, 0xC0, 0x39, 0xC0, 0x73, 0xC3, 0xE3, 0xFF, 0xC3,
  0xFF, 0x81, 0xF3, 0x00, 0x07, 0xC0, 0x7F, 0xC3, 0xFF, 0x9E, 0x0E, 0x70,
  0x39, 0x83, 0xCE, 0x7E, 0x3F, 0xE0, 0xFC, 0x03, 0xC0, 0x0E, 0x00, 0xDE,
  0x0F, 0x7F, 0xFC, 0xFF, 0xE0, 0xFE, 0x00, 0x01, 0xF0, 0x3F, 0x07, 0xF0,
  0x78, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x7F, 0xFF, 0xFF, 0xFF, 0xE0,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x01, 0xC0, 0x0C, 0x00, 0x07, 0xE0, 0xFF,
  0x8F, 0xFE, 0xF8, 0x77, 0x03, 0xF0, 0x1F, 0x80, 0xFC, 0x07, 0xE0, 0x3F,
  0x03, 0xF8, 0x1F, 0xE3, 0xE7, 0xFB, 0x1F, 0x98, 0x78, 0xC0, 0x0E, 0x00,
  0x70, 0x03, 0x80, 0x3C, 0x03, 0xCF, 0xFE, 0x7F, 0xE1, 0xFC, 0x00, 0x60,
  0x07, 0x00, 0x38, 0x01, 0xC0, 0x0E, 0x00, 0x70, 0x03, 0x80, 0x1C, 0x00,
  0xE3, 0xE7, 0x3F, 0xBB, 0xFD, 0xFC, 0xEF, 0x83, 0x7C, 0x1B, 0xC0, 0xDC,
  0x06, 0xE0, 0x3F, 0x01, 0xF8, 0x0F, 0xC0, 0x7E, 0x03, 0xF0, 0x1F, 0x80,
  0x60, 0xFF, 0x80, 0x37, 0xFF, 0x6D, 0xB6, 0xDB, 0x6C, 0x07, 0x03, 0x81,
  0xC0, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x03, 0x81, 0xC0, 0xE0, 0x70, 0x38,
  0x1C, 0x0E, 0x07, 0x03, 0x81, 0xC0, 0xE0, 0x70, 0x38, 0x1F, 0x0F, 0xC7,
  0xE3, 0xB9, 0xDF, 0xE7, 0xE1, 0xE0, 0x60, 0x03, 0x00, 0x18, 0x00, 0xE0,
  0x07, 0x00, 0x38, 0x19, 0xC1, 0xEC, 0x1F, 0x60, 0xFB, 0x0F, 0x98, 0xF8,
  0xCF, 0x86, 0xF8, 0x3F, 0x81, 0xFE, 0x0F, 0xF8, 0x71, 0xC7, 0x0F, 0x38,
  0x3D, 0xC0, 0xEE, 0x03, 0xF0, 0x1D, 0x80, 0x60, 0x67, 0x77, 0x77, 0x77,
  0x77, 0x77, 0x77, 0x66, 0x66, 0x6E, 0xEE, 0x60, 0xE3, 0x8F, 0x1D, 0xFB,
  0xF3, 0xFF, 0xFF, 0x7E, 0xFC, 0xEF, 0x8E, 0x1D, 0xE1, 0x81, 0xB8, 0x30,
  0x37, 0x06, 0x07, 0xE0, 0xE0, 0xFC, 0x1C, 0x1F, 0x83, 0x83, 0xE0, 0x70,
  0x7E, 0x0E, 0x0F, 0xC1, 0xC0, 0xF0, 0x38, 0x18, 0x03, 0x00, 0xE3, 0xCE,
  0xFE, 0xFF, 0xEF, 0xC6, 0xF8, 0x7F, 0x07, 0xF0, 0x7E, 0x07, 0xE0, 0x7E,
  0x07, 0xE0, 0x7E, 0x07, 0xE0, 0x7E, 0x07, 0xC0, 0x30, 0x07, 0x80, 0xFF,
  0x0F, 0xFC, 0xF0, 0xE7, 0x03, 0x78, 0x1F, 0x80, 0xFC, 0x07, 0xE0, 0x3F,
  0x01, 0x9C, 0x1C, 0xF1, 0xE7, 0xFE, 0x1F, 0xE0, 0x3E, 0x00, 0xC0, 0x0E,
  0x78, 0xDF, 0xCF, 0xFE, 0xF8, 0xFE, 0x07, 0xE0, 0x7E, 0x07, 0xE0, 0x7E,
  0x07, 0xE0, 0x7E, 0x07, 0xE0, 0x7E, 0x0E, 0xFF, 0xEF, 0xFC, 0xFF, 0x0E,
  0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0x07, 0xF1,
  0xFF, 0x3F, 0xF7, 0xC3, 0x78, 0x3F, 0x03, 0xE0, 0x7E, 0x07, 0xE0, 0x7E,
  0x07, 0xE0, 0x7E, 0x07, 0xF0, 0xF7, 0xFF, 0x3F, 0xE0, 0xFE, 0x00, 0x60,
  0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0xC3, 0xDD, 0xFF,
  0xFF, 0xFE, 0x7F, 0x0F, 0xC1, 0xF8, 0x07, 0x00, 0xE0, 0x1C, 0x03, 0x80,
  0x70, 0x0E, 0x01, 0xC0, 0x30, 0x00, 0x00, 0xE0, 0xFF, 0x3F, 0xF7, 0xE7,
  0x70, 0x77, 0x00, 0x7E, 0x03, 0xFC, 0x03, 0xE0, 0x0E, 0x00, 0x6C, 0x0E,
  0xFF, 0xEF, 0xFC, 0x3F, 0x80, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E,
  0x0F, 0xFF, 0xFF, 0xF7, 0xFE, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E,
  0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0xC0,
  0x6E, 0x07, 0xE0, 0x7C, 0x07, 0xC0, 0x7C, 0x07, 0xC0, 0x7C, 0x07, 0xC0,
  0x7E, 0x07, 0xE0, 0x7E, 0x0F, 0xFF, 0xF7, 0xFF, 0x3F, 0x60, 0xC0, 0x37,
  0x01, 0xF8, 0x1C, 0xE0, 0xE7, 0x07, 0x38, 0x70, 0xE3, 0x87, 0x18, 0x19,
  0xC0, 0xEE, 0x07, 0xE0, 0x1F, 0x00, 0xF0, 0x07, 0x80, 0x18, 0x00, 0x00,
  0xE0, 0xC1, 0xF8, 0x78, 0x7E, 0x1E, 0x1F, 0x87, 0x87, 0xE3, 0xE3, 0x98,
  0xF8, 0xE7, 0x36, 0x39, 0xDD, 0xCC, 0x77, 0x77, 0x1D, 0x8D, 0xC7, 0xE3,
  0x60, 0xF0, 0xD8, 0x3C, 0x3E, 0x0F, 0x07, 0x01, 0x81, 0xC0, 0x30, 0x06,
  0xF0, 0x1C, 0xF0, 0x78, 0xE1, 0xE0, 0xE7, 0x81, 0xFE, 0x01, 0xF8, 0x01,
  0xC0, 0x07, 0xC0, 0x1F, 0xC0, 0x73, 0xC3, 0xC3, 0x8F, 0x03, 0x9C, 0x07,
  0xB0, 0x07, 0x00, 0x06, 0xC0, 0x0D, 0xC0, 0x1B, 0xC0, 0x73, 0x80, 0xE7,
  0x83, 0x87, 0x07, 0x0F, 0x1C, 0x0E, 0x38, 0x1E, 0xF0, 0x1D, 0xC0, 0x3F,
  0x80, 0x3E, 0x00, 0x7C, 0x00, 0x70, 0x00, 0xE0, 0x03, 0x80, 0x07, 0x00,
  0x1C, 0x00, 0x38, 0x00, 0x70, 0x01, 0xC0, 0x03, 0x80, 0x06, 0x00, 0x00,
  0x7F, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0xC0, 0x1E, 0x00, 0xE0, 0x0E, 0x00,
  0xE0, 0x0F, 0x00, 0x70, 0x07, 0x00, 0x70, 0x07, 0xFF, 0x7F, 0xFB, 0xFF,
  0xC0, 0x03, 0x83, 0xF0, 0xFC, 0x70, 0x1C, 0x06, 0x01, 0x80, 0x60, 0x1C,
  0x07, 0x01, 0xC0, 0x70, 0x1C, 0x1E, 0x0F, 0x83, 0xC0, 0x78, 0x0E, 0x01,
  0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x70, 0x1C, 0x07, 0x00, 0xF8, 0x3F,
  0x03, 0x80, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFC, 0x70, 0x3F, 0x0F, 0xC0, 0x78, 0x0E, 0x03, 0x80, 0xE0, 0x38, 0x0E,
  0x03, 0x80, 0xE0, 0x38, 0x0E, 0x01, 0xE0, 0x78, 0x0F, 0x07, 0x81, 0xC0,
  0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x38, 0x0E, 0x07, 0x87, 0xC3, 0xE0,
  0x70, 0x00, 0x0E, 0x00, 0x3E, 0x0C, 0xFE, 0x1B, 0xDC, 0x77, 0x1C, 0xFC,
  0x3F, 0xD8, 0x3F, 0x00, 0x1C
};

const GFXglyph __comic15pt7bGlyphs[] PROGMEM = {
  {     0,   0,   0,   9,    0,    1 },   // 0x20 ' '
  {     0,   3,  24,   7,    2,  -22 },   // 0x21 '!'
  {     9,   8,   9,  12,    2,  -21 },   // 0x22 '"'
  {    18,  24,  22,  24,    0,  -21 },   // 0x23 '#'
  {    84,  16,  31,  20,    1,  -25 },   // 0x24 '$'
  {   146,  21,  23,  24,    2,  -22 },   // 0x25 '%'
  {   207,  17,  24,  19,    1,  -21 },   // 0x26 '&'
  {   258,   3,   7,  11,    4,  -21 },   // 0x27 '''
  {   261,   8,  29,  11,    2,  -22 },   // 0x28 '('
  {   290,   8,  29,  11,    2,  -22 },   // 0x29 ')'
  {   319,  13,  12,  15,    1,  -22 },   // 0x2A '*'
  {   339,  12,  13,  14,    1,  -15 },   // 0x2B '+'
  {   359,   4,   7,   8,    3,   -1 },   // 0x2C ','
  {   363,   9,   3,  12,    2,   -9 },   // 0x2D '-'
  {   367,   4,   4,   7,    2,   -3 },   // 0x2E '.'
  {   369,  13,  24,  15,    1,  -22 },   // 0x2F '/'
  {   408,  16,  22,  18,    1,  -21 },   // 0x30 '0'
  {   452,   9,  22,  13,    2,  -21 },   // 0x31 '1'
  {   477,  14,  22,  18,    2,  -21 },   // 0x32 '2'
  {   516,  13,  22,  18,    2,  -21 },   // 0x33 '3'
  {   552,  16,  22,  18,    1,  -21 },   // 0x34 '4'
  {   596,  14,  22,  18,    2,  -21 },   // 0x35 '5'
  {   635,  14,  22,  18,    2,  -21 },   // 0x36 '6'
  {   674,  16,  22,  18,    1,  -21 },   // 0x37 '7'
  {   718,  14,  22,  18,    2,  -21 },   // 0x38 '8'
  {   757,  14,  23,  18,    2,  -21 },   // 0x39 '9'
  {   798,   3,  13,   9,    3,  -14 },   // 0x3A ':'
  {   803,   5,  18,   9,    1,  -14 },   // 0x3B ';'
  {   815,   9,  12,  11,    0,  -14 },   // 0x3C '<'
  {   829,  11,  11,  15,    1,  -14 },   // 0x3D '='
  {   845,   9,  13,  11,    1,  -15 },   // 0x3E '>'
  {   860,  13,  22,  15,    1,  -20 },   // 0x3F '?'
  {   896,  23,  25,  27,    2,  -22 },   // 0x40 '@'
  {   968,  17,  22,  21,    2,  -21 },   // 0x41 'A'
  {  1015,  14,  23,  18,    3,  -21 },   // 0x42 'B'
  {  1056,  16,  22,  17,    1,  -21 },   // 0x43 'C'
  {  1100,  16,  22,  21,    3,  -21 },   // 0x44 'D'
  {  1144,  15,  22,  18,    2,  -21 },   // 0x45 'E'
  {  1186,  15,  22,  18,    2,  -21 },   // 0x46 'F'
  {  1228,  18,  22,  20,    1,  -21 },   // 0x47 'G'
  {  1278,  19,  22,  22,    2,  -21 },   // 0x48 'H'
  {  1331,  14,  22,  16,    1,  -21 },   // 0x49 'I'
  {  1370,  17,  24,  19,    1,  -21 },   // 0x4A 'J'
  {  1421,  15,  24,  18,    3,  -21 },   // 0x4B 'K'
  {  1466,  14,  22,  16,    1,  -21 },   // 0x4C 'L'
  {  1505,  23,  23,  26,    2,  -21 },   // 0x4D 'M'
  {  1572,  20,  22,  23,    2,  -21 },   // 0x4E 'N'
  {  1627,  20,  22,  23,    2,  -21 },   // 0x4F 'O'
  {  1682,  13,  22,  15,    1,  -21 },   // 0x50 'P'
  {  1718,  24,  28,  25,    1,  -21 },   // 0x51 'Q'
  {  1802,  15,  22,  18,    2,  -21 },   // 0x52 'R'
  {  1844,  17,  22,  20,    2,  -21 },   // 0x53 'S'
  {  1891,  19,  22,  20,    2,  -21 },   // 0x54 'T'
  {  1944,  18,  22,  21,    2,  -21 },   // 0x55 'U'
  {  1994,  17,  22,  19,    2,  -21 },   // 0x56 'V'
  {  2041,  28,  23,  30,    2,  -21 },   // 0x57 'W'
  {  2122,  19,  22,  21,    1,  -21 },   // 0x58 'X'
  {  2175,  17,  22,  18,    0,  -20 },   // 0x59 'Y'
  {  2222,  19,  22,  20,    1,  -21 },   // 0x5A 'Z'
  {  2275,   7,  27,  11,    3,  -20 },   // 0x5B '['
  {  2299,  11,  24,  16,    3,  -21 },   // 0x5C '\'
  {  2332,   7,  27,  11,    3,  -20 },   // 0x5D ']'
  {  2356,  11,   7,  17,    3,  -22 },   // 0x5E '^'
  {  2366,  19,   2,  18,    0,    4 },   // 0x5F '_'
  {  2371,   6,   7,  16,    2,  -22 },   // 0x60 '`'
  {  2377,  13,  15,  15,    1,  -14 },   // 0x61 'a'
  {  2402,  14,  23,  17,    2,  -22 },   // 0x62 'b'
  {  2443,  13,  15,  15,    1,  -14 },   // 0x63 'c'
  {  2468,  15,  23,  17,    1,  -22 },   // 0x64 'd'
  {  2512,  14,  15,  16,    1,  -14 },   // 0x65 'e'
  {  2539,  12,  25,  15,    1,  -22 },   // 0x66 'f'
  {  2577,  13,  23,  15,    1,  -14 },   // 0x67 'g'
  {  2615,  13,  23,  17,    2,  -22 },   // 0x68 'h'
  {  2653,   3,  21,   8,    3,  -20 },   // 0x69 'i'
  {  2661,   9,  29,  12,    0,  -20 },   // 0x6A 'j'
  {  2694,  13,  23,  16,    2,  -21 },   // 0x6B 'k'
  {  2732,   4,  23,   8,    2,  -22 },   // 0x6C 'l'
  {  2744,  19,  16,  23,    2,  -14 },   // 0x6D 'm'
  {  2782,  12,  15,  15,    2,  -14 },   // 0x6E 'n'
  {  2805,  13,  15,  15,    1,  -14 },   // 0x6F 'o'
  {  2830,  12,  24,  16,    2,  -15 },   // 0x70 'p'
  {  2866,  12,  23,  15,    1,  -14 },   // 0x71 'q'
  {  2901,  11,  15,  14,    2,  -14 },   // 0x72 'r'
  {  2922,  12,  15,  14,    1,  -14 },   // 0x73 's'
  {  2945,  12,  20,  14,    1,  -19 },   // 0x74 't'
  {  2975,  12,  15,  15,    2,  -14 },   // 0x75 'u'
  {  2998,  13,  16,  14,    1,  -14 },   // 0x76 'v'
  {  3024,  18,  15,  20,    1,  -14 },   // 0x77 'w'
  {  3058,  15,  16,  17,    1,  -14 },   // 0x78 'x'
  {  3088,  15,  23,  15,    0,  -14 },   // 0x79 'y'
  {  3132,  13,  15,  16,    2,  -14 },   // 0x7A 'z'
  {  3157,  10,  29,  11,    0,  -22 },   // 0x7B '{'
  {  3194,   3,  29,  12,    5,  -23 },   // 0x7C '|'
  {  3205,  10,  29,  11,    0,  -22 },   // 0x7D '}'
  {  3242,  15,   8,  17,    1,  -14 }
}; // 0x7E '~'

const GFXfont __comic15pt7b PROGMEM = {
  (uint8_t  *)__comic15pt7bBitmaps,
  (GFXglyph *)__comic15pt7bGlyphs,
  0x20, 0x7E, 40
};

// Approx. 3929 bytes


const uint8_t __comic12pt7bBitmaps[] PROGMEM = {
  0x6D, 0xB6, 0xDB, 0x6D, 0xB6, 0xD8, 0x0B, 0xB0, 0x47, 0xCF, 0x1E, 0x3C,
  0x78, 0xF9, 0xA3, 0x00, 0x80, 0x80, 0x18, 0x18, 0x01, 0x81, 0x80, 0x18,
  0x18, 0x03, 0x83, 0x83, 0xFF, 0xFF, 0x3F, 0xFF, 0xF0, 0x30, 0x70, 0x06,
  0x06, 0x00, 0x60, 0x60, 0x0E, 0x0E, 0x07, 0xFF, 0xFE, 0xFF, 0xFF, 0xE1,
  0xC0, 0xC0, 0x18, 0x1C, 0x01, 0x81, 0x80, 0x18, 0x18, 0x01, 0x01, 0x80,
  0x03, 0x00, 0x18, 0x00, 0xC0, 0x0F, 0xC1, 0xFF, 0x1D, 0x98, 0xCC, 0x0E,
  0x60, 0x73, 0x03, 0x98, 0x1E, 0xC0, 0x7F, 0x80, 0xFF, 0x01, 0xBC, 0x0C,
  0x60, 0x63, 0x03, 0x1E, 0x19, 0xFC, 0xDE, 0xFF, 0xE3, 0xFC, 0x01, 0x80,
  0x0C, 0x00, 0x60, 0x03, 0x00, 0x00, 0x18, 0x1C, 0x18, 0x3F, 0x0C, 0x18,
  0xCC, 0x0C, 0x66, 0x06, 0x37, 0x03, 0xF3, 0x00, 0xF3, 0x80, 0x01, 0x80,
  0x00, 0xC0, 0x00, 0xC0, 0x00, 0x63, 0xC0, 0x63, 0xF0, 0x33, 0x9C, 0x31,
  0x86, 0x18, 0xC3, 0x18, 0x63, 0x8C, 0x1F, 0x84, 0x07, 0x80, 0x03, 0x80,
  0x1F, 0x00, 0x66, 0x01, 0xB8, 0x06, 0xC0, 0x1F, 0x00, 0x78, 0x03, 0xC0,
  0x1F, 0x19, 0xE6, 0x66, 0x1D, 0xB8, 0x36, 0xC0, 0xFB, 0x01, 0xCC, 0x07,
  0x38, 0x3E, 0x7F, 0xD8, 0x7C, 0x70, 0x00, 0xC0, 0x5F, 0x6E, 0x80, 0x06,
  0x1C, 0x70, 0xC3, 0x86, 0x1C, 0x30, 0x60, 0xC3, 0x87, 0x0E, 0x1C, 0x38,
  0x30, 0x60, 0xC1, 0xC1, 0x83, 0x83, 0x83, 0x83, 0x41, 0xC1, 0xC1, 0xC1,
  0x83, 0x83, 0x06, 0x0E, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x0E, 0x1C,
  0x30, 0xE1, 0x87, 0x1C, 0x70, 0x0C, 0x03, 0x0E, 0xFF, 0xFF, 0x7F, 0x87,
  0x83, 0xF1, 0xCE, 0x61, 0x80, 0x08, 0x07, 0x01, 0x80, 0x60, 0xFF, 0xBF,
  0xF1, 0xC0, 0x70, 0x1C, 0x02, 0x00, 0x33, 0x66, 0xE4, 0xFF, 0xFF, 0xDF,
  0x00, 0x00, 0x40, 0x30, 0x0C, 0x06, 0x01, 0x80, 0xE0, 0x30, 0x1C, 0x06,
  0x03, 0x80, 0xC0, 0x70, 0x18, 0x0E, 0x03, 0x01, 0xC0, 0x60, 0x38, 0x0C,
  0x03, 0x00, 0x0F, 0x81, 0xFE, 0x0E, 0x38, 0xE0, 0xEE, 0x03, 0x60, 0x1F,
  0x00, 0xF8, 0x07, 0xC0, 0x3E, 0x01, 0xF0, 0x0F, 0x80, 0x7C, 0x03, 0x70,
  0x19, 0x81, 0xCE, 0x1C, 0x3F, 0xC0, 0x7C, 0x00, 0x18, 0x71, 0xE7, 0xCD,
  0x83, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC1, 0x83, 0x06, 0x0C, 0xFF, 0xFC,
  0x1F, 0x0F, 0xFB, 0xC7, 0x60, 0x70, 0x0E, 0x01, 0xC0, 0x70, 0x1E, 0x07,
  0x81, 0xE0, 0xF0, 0x3C, 0x07, 0x01, 0xC0, 0x30, 0x06, 0x00, 0xFF, 0xDF,
  0xFC, 0x3F, 0x0F, 0xF3, 0x87, 0x00, 0x60, 0x0C, 0x01, 0x80, 0xF0, 0xFC,
  0x1F, 0x00, 0xF8, 0x07, 0x00, 0x70, 0x0E, 0x01, 0xF0, 0x37, 0x0E, 0x7F,
  0x87, 0xC0, 0x00, 0xC0, 0x0E, 0x00, 0xF0, 0x0F, 0x80, 0x6C, 0x07, 0x60,
  0x73, 0x03, 0x18, 0x38, 0xC3, 0x86, 0x3C, 0x31, 0xFF, 0xFF, 0xFF, 0x80,
  0x60, 0x03, 0x00, 0x18, 0x00, 0xC0, 0x06, 0x00, 0x7F, 0xF3, 0xFF, 0x9C,
  0x00, 0xC0, 0x06, 0x00, 0x33, 0xE1, 0xFF, 0x8F, 0x0E, 0x70, 0x33, 0x01,
  0x80, 0x0C, 0x00, 0x70, 0x03, 0x00, 0x19, 0x81, 0xCE, 0x1C, 0x7F, 0xC0,
  0xF8, 0x00, 0x03, 0x00, 0x70, 0x0F, 0x01, 0xC0, 0x38, 0x03, 0x00, 0x70,
  0x06, 0xF8, 0x7F, 0xEF, 0x0E, 0xE0, 0x7E, 0x03, 0xE0, 0x36, 0x07, 0x60,
  0x77, 0x0E, 0x3F, 0xC1, 0xF8, 0xFF, 0xFF, 0xFF, 0xC0, 0x1C, 0x01, 0xC0,
  0x0C, 0x00, 0xE0, 0x06, 0x00, 0x70, 0x03, 0x00, 0x38, 0x01, 0x80, 0x1C,
  0x00, 0xE0, 0x06, 0x00, 0x70, 0x03, 0x00, 0x38, 0x01, 0x80, 0x00, 0x0F,
  0x83, 0xFC, 0x30, 0xE7, 0x06, 0x60, 0x66, 0x06, 0x79, 0xE3, 0xFC, 0x1F,
  0xC3, 0x9E, 0x70, 0x76, 0x03, 0xE0, 0x3E, 0x03, 0x60, 0x77, 0x0F, 0x3F,
  0xE1, 0xF8, 0x0F, 0x81, 0xFE, 0x1C, 0x38, 0xC0, 0xEE, 0x03, 0x70, 0x1B,
  0x80, 0xFC, 0x06, 0x60, 0x33, 0x87, 0x8F, 0xFC, 0x1F, 0xE0, 0x06, 0x00,
  0x70, 0x07, 0x00, 0x70, 0x1F, 0x01, 0xE0, 0x0C, 0x00, 0xDF, 0x00, 0x00,
  0xFD, 0x80, 0x27, 0x30, 0x00, 0x00, 0x03, 0x7E, 0xCC, 0x06, 0x1C, 0x71,
  0xC7, 0x1E, 0x0E, 0x0E, 0x0E, 0x0C, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x00,
  0x03, 0xFF, 0xFF, 0xC0, 0x60, 0x30, 0x18, 0x0E, 0x1F, 0x3E, 0x7C, 0xF8,
  0xE0, 0xC0, 0x3C, 0x3F, 0xCE, 0x33, 0x06, 0x00, 0xC0, 0x30, 0x0C, 0x07,
  0x03, 0xC1, 0xF0, 0xFC, 0x7E, 0x3E, 0x0C, 0x00, 0x00, 0xC0, 0x70, 0x0C,
  0x00, 0x01, 0xF8, 0x00, 0x7F, 0xE0, 0x1E, 0x07, 0x83, 0x80, 0x3C, 0x38,
  0x00, 0xC7, 0x0E, 0x0E, 0x61, 0xE0, 0x66, 0x3C, 0x06, 0xE7, 0x10, 0x7E,
  0x63, 0x87, 0xE6, 0x38, 0x6E, 0x67, 0x8E, 0x67, 0xFF, 0xC6, 0x1C, 0xF8,
  0x70, 0x00, 0x03, 0x80, 0x00, 0x1C, 0x00, 0x00, 0xE0, 0x70, 0x07, 0xFF,
  0x00, 0x1F, 0xC0, 0x00, 0xC0, 0x03, 0x00, 0x1E, 0x00, 0xF8, 0x03, 0x60,
  0x1D, 0x80, 0x66, 0x03, 0x9C, 0x1C, 0x70, 0x71, 0xC3, 0xFF, 0x1F, 0xFC,
  0x7C, 0x39, 0x80, 0xEE, 0x01, 0xB8, 0x06, 0xC0, 0x1F, 0x00, 0x30, 0x7E,
  0x07, 0xF8, 0x61, 0xC6, 0x0E, 0x60, 0x66, 0x06, 0x60, 0xE6, 0x0E, 0xE3,
  0xCF, 0xF8, 0xFF, 0xCE, 0x1E, 0xE0, 0x7E, 0x03, 0xE0, 0x7E, 0x0F, 0xE3,
  0xEF, 0xF8, 0x7E, 0x00, 0x01, 0xF8, 0x3F, 0xC3, 0xC6, 0x38, 0x31, 0x80,
  0x1C, 0x01, 0xC0, 0x0E, 0x00, 0x60, 0x07, 0x00, 0x38, 0x01, 0x80, 0x0C,
  0x00, 0x70, 0x19, 0x81, 0xCE, 0x1E, 0x3F, 0xC0, 0xF8, 0x00, 0x60, 0x03,
  0xE0, 0x0E, 0xF0, 0x38, 0xF0, 0xE0, 0xE3, 0x81, 0xCE, 0x03, 0xB8, 0x06,
  0xE0, 0x1F, 0x80, 0x3E, 0x00, 0xF8, 0x03, 0xE0, 0x1F, 0x80, 0x6E, 0x03,
  0xB8, 0x1C, 0xFF, 0xE0, 0x7E, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0x0C, 0x00,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x3E, 0xFF, 0xEF, 0xC0, 0xC0, 0x0C, 0x00,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xFF, 0xE7, 0xFE, 0xFF, 0xCF, 0xFF,
  0xE0, 0x3E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0xFE, 0xFF, 0xEF, 0x00,
  0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00, 0xC0, 0x0C, 0x00,
  0x03, 0xE0, 0x0F, 0xF0, 0x38, 0xE0, 0xE0, 0x03, 0x80, 0x06, 0x00, 0x1C,
  0x00, 0x30, 0x00, 0xE1, 0xFF, 0xDF, 0xFF, 0x1C, 0x76, 0x00, 0xEC, 0x01,
  0xD8, 0x07, 0x38, 0x1C, 0x30, 0x78, 0x7F, 0xC0, 0x3F, 0x00, 0xC0, 0x07,
  0xC0, 0x0F, 0x80, 0x1E, 0x00, 0x3C, 0x00, 0x78, 0x00, 0xF0, 0x01, 0xE0,
  0x03, 0xC0, 0xFF, 0xBF, 0xFF, 0xFC, 0x3F, 0x00, 0x7C, 0x00, 0xF8, 0x01,
  0xF0, 0x03, 0xE0, 0x07, 0xC0, 0x07, 0x80, 0x0C, 0xFF, 0xFF, 0xFC, 0x30,
  0x06, 0x00, 0xC0, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06,
  0x00, 0xC0, 0x18, 0x03, 0x00, 0x60, 0xFF, 0xFF, 0xFC, 0x1F, 0xFC, 0x7F,
  0xF0, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03, 0x00, 0x0C, 0x00, 0x30, 0x00,
  0xC0, 0x03, 0x00, 0x0C, 0x00, 0x30, 0xC1, 0xC3, 0x07, 0x0E, 0x18, 0x1C,
  0x60, 0x3F, 0x80, 0x3C, 0x00, 0xC0, 0x6C, 0x0E, 0xC1, 0xCC, 0x38, 0xC7,
  0x0C, 0xE0, 0xDE, 0x0F, 0xC0, 0xF0, 0x0F, 0x00, 0xF8, 0x0F, 0xC0, 0xDE,
  0x0C, 0xF0, 0xC7, 0x8C, 0x3C, 0xC1, 0xFC, 0x06, 0x60, 0x06, 0x00, 0x60,
  0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0xE0,
  0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0xFF, 0xF7, 0xFF, 0x0C,
  0x06, 0x01, 0xC0, 0xE0, 0x78, 0x1C, 0x0F, 0x03, 0x81, 0xE0, 0xF8, 0x3C,
  0x1F, 0x07, 0xC3, 0x61, 0xD8, 0x6C, 0x3B, 0x19, 0x86, 0x63, 0x30, 0xCC,
  0x66, 0x39, 0xDC, 0xE7, 0x1B, 0x0C, 0xC3, 0x61, 0x98, 0x7C, 0x37, 0x0F,
  0x07, 0xE0, 0xE0, 0xFC, 0x1C, 0x0D, 0x03, 0x01, 0x80, 0x60, 0x03, 0x78,
  0x01, 0xBC, 0x00, 0xEF, 0x00, 0x77, 0xC0, 0x3B, 0x60, 0x0D, 0x98, 0x06,
  0xCE, 0x03, 0x63, 0x81, 0xB0, 0xE0, 0xD8, 0x38, 0x6C, 0x0E, 0x36, 0x07,
  0x9B, 0x01, 0xED, 0x80, 0x7E, 0xC0, 0x1F, 0x60, 0x07, 0xB0, 0x01, 0xC0,
  0x01, 0xF8, 0x03, 0xFF, 0x03, 0x83, 0xC3, 0x80, 0x63, 0x80, 0x39, 0x80,
  0x0D, 0xC0, 0x06, 0xC0, 0x03, 0x60, 0x01, 0xF0, 0x01, 0xF8, 0x00, 0xFC,
  0x00, 0x66, 0x00, 0x73, 0x00, 0x31, 0xC0, 0x38, 0x78, 0x38, 0x1F, 0xF8,
  0x03, 0xF0, 0x00, 0x7E, 0x0F, 0xF1, 0x87, 0x30, 0x66, 0x06, 0xC0, 0xD8,
  0x3F, 0x06, 0xE3, 0xDF, 0xF3, 0xF8, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06,
  0x00, 0xC0, 0x18, 0x00, 0x01, 0xF8, 0x00, 0x7F, 0xE0, 0x1E, 0x07, 0x03,
  0x80, 0x38, 0x70, 0x01, 0xC6, 0x00, 0x1C, 0xE0, 0x00, 0xCE, 0x00, 0x0E,
  0xC0, 0x00, 0xEC, 0x00, 0x0E, 0xC0, 0x00, 0xEE, 0x00, 0x0E, 0x60, 0xE0,
  0xC7, 0x0E, 0x1C, 0x38, 0x73, 0x81, 0xC3, 0xF8, 0x0F, 0xFE, 0x00, 0x3F,
  0x70, 0x00, 0x03, 0xC0, 0x00, 0x1C, 0x00, 0x00, 0xE0, 0x00, 0x07, 0x00,
  0x00, 0x20, 0x7E, 0x03, 0xFC, 0x18, 0xF0, 0xC1, 0xC6, 0x07, 0x30, 0x19,
  0x80, 0xCC, 0x06, 0x60, 0x77, 0x07, 0x3F, 0xF1, 0xFE, 0x0E, 0x78, 0x70,
  0xF3, 0x83, 0xCC, 0x0F, 0x60, 0x3B, 0x00, 0xC0, 0x03, 0xE0, 0x7F, 0x8F,
  0x0C, 0x60, 0x07, 0x00, 0x38, 0x01, 0xE0, 0x07, 0xF8, 0x1F, 0xF0, 0x03,
  0xC0, 0x0E, 0x00, 0x30, 0x01, 0xE0, 0x0F, 0x00, 0xFC, 0x1E, 0x7F, 0xE0,
  0xFC, 0x00, 0xFF, 0xFF, 0x7F, 0xFF, 0x03, 0x80, 0x03, 0x80, 0x01, 0x80,
  0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80,
  0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0x80, 0x01, 0xC0, 0x01, 0x80,
  0x01, 0x80, 0xC0, 0x0F, 0x00, 0x3C, 0x00, 0xF0, 0x03, 0xC0, 0x0F, 0x00,
  0x3C, 0x00, 0xF0, 0x03, 0xC0, 0x0F, 0x00, 0x3C, 0x01, 0xF0, 0x07, 0xE0,
  0x19, 0x80, 0xE7, 0x03, 0x9E, 0x1C, 0x3F, 0xE0, 0x3F, 0x00, 0xC0, 0x1B,
  0x00, 0x7C, 0x03, 0xB8, 0x0C, 0xE0, 0x71, 0x81, 0xC6, 0x06, 0x1C, 0x38,
  0x70, 0xE0, 0xC3, 0x03, 0x9C, 0x0E, 0x60, 0x19, 0x80, 0x6E, 0x01, 0xF0,
  0x03, 0xC0, 0x0F, 0x00, 0x38, 0x00, 0xC0, 0x30, 0x0D, 0x80, 0x60, 0x1B,
  0x81, 0xE0, 0x77, 0x03, 0xC0, 0xE6, 0x0F, 0x81, 0x8E, 0x1F, 0x03, 0x1C,
  0x36, 0x0E, 0x18, 0x6C, 0x18, 0x31, 0xDC, 0x30, 0x63, 0x18, 0xC0, 0xE6,
  0x31, 0x80, 0xDC, 0x67, 0x01, 0xB0, 0xCC, 0x03, 0x61, 0xD8, 0x07, 0xC3,
  0xE0, 0x07, 0x03, 0xC0, 0x0E, 0x07, 0x80, 0x1C, 0x0E, 0x00, 0x60, 0x06,
  0xE0, 0x1D, 0xE0, 0x39, 0xC0, 0xE1, 0xC3, 0x81, 0xCE, 0x01, 0xDC, 0x03,
  0xF0, 0x03, 0xC0, 0x07, 0x80, 0x1F, 0x80, 0x73, 0x01, 0xE7, 0x07, 0x87,
  0x0E, 0x07, 0x38, 0x0E, 0xE0, 0x0F, 0x80, 0x0C, 0x40, 0x0F, 0x80, 0x37,
  0x01, 0xCC, 0x06, 0x38, 0x38, 0x70, 0xE1, 0xC7, 0x03, 0x9C, 0x0E, 0x60,
  0x1F, 0x80, 0x3C, 0x00, 0xF0, 0x01, 0xC0, 0x0E, 0x00, 0x38, 0x01, 0xC0,
  0x06, 0x00, 0x38, 0x00, 0x40, 0x00, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0xF0,
  0x03, 0xC0, 0x0E, 0x00, 0x38, 0x00, 0x70, 0x01, 0xC0, 0x07, 0x00, 0x1C,
  0x00, 0x38, 0x00, 0xE0, 0x03, 0x80, 0x06, 0x00, 0x1C, 0x00, 0x70, 0x00,
  0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFC, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C,
  0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0F, 0xFF, 0xC0, 0x38,
  0x06, 0x01, 0xC0, 0x30, 0x0E, 0x01, 0x80, 0x60, 0x0C, 0x03, 0x00, 0xE0,
  0x18, 0x06, 0x01, 0xC0, 0x30, 0x0E, 0x01, 0x80, 0x70, 0x1C, 0x03, 0x7D,
  0xF0, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 0x0C,
  0x30, 0xC3, 0x0C, 0x3F, 0xFF, 0x0C, 0x07, 0x83, 0xF1, 0xCE, 0xE1, 0xD0,
  0x30, 0xFF, 0xFF, 0xFF, 0xFF, 0xC7, 0x18, 0x63, 0x8C, 0x0F, 0x87, 0xF9,
  0xC3, 0x70, 0xEC, 0x1D, 0x83, 0xB0, 0x76, 0x06, 0xC0, 0xDC, 0x39, 0xFF,
  0x9F, 0x30, 0xC0, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06,
  0xF8, 0xFF, 0x9E, 0x3B, 0x03, 0xE0, 0x3C, 0x07, 0x80, 0xF0, 0x1E, 0x07,
  0xE1, 0xDF, 0xF3, 0xFC, 0x00, 0x0F, 0x07, 0xF3, 0x8D, 0xC0, 0x60, 0x38,
  0x0C, 0x03, 0x00, 0xE0, 0x1C, 0x33, 0xFC, 0x7C, 0x00, 0x30, 0x03, 0x00,
  0x30, 0x03, 0x00, 0x70, 0x07, 0x00, 0x70, 0xF6, 0x3F, 0xE7, 0x0E, 0x60,
  0x6E, 0x06, 0xC0, 0x6C, 0x06, 0xC0, 0x66, 0x06, 0x70, 0xE3, 0xFF, 0x1F,
  0xA0, 0x1F, 0x83, 0xFC, 0x70, 0xC6, 0x0C, 0xC7, 0xCD, 0xF0, 0xFC, 0x0E,
  0x00, 0xE0, 0x27, 0x0F, 0x3F, 0xE1, 0xF8, 0x03, 0xC1, 0xF0, 0xE0, 0x30,
  0x1C, 0x06, 0x01, 0x83, 0xFF, 0xFF, 0xC6, 0x01, 0x80, 0x60, 0x18, 0x06,
  0x01, 0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x0F, 0x87, 0xF9, 0xC3,
  0xF0, 0x7C, 0x0F, 0x81, 0xB0, 0x36, 0x06, 0xC1, 0xDC, 0x79, 0xFB, 0x1E,
  0x60, 0x0C, 0x01, 0x80, 0x70, 0x0C, 0x03, 0x9F, 0xE3, 0xF8, 0x00, 0xC0,
  0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x06, 0x3C, 0xDF, 0x9F,
  0x3B, 0xC3, 0x70, 0x6E, 0x0D, 0x81, 0xB0, 0x36, 0x06, 0xC0, 0xD8, 0x1F,
  0x03, 0x00, 0x6C, 0x00, 0xBF, 0xFB, 0x6D, 0xB6, 0xC0, 0x0E, 0x0E, 0x00,
  0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
  0x07, 0x07, 0x07, 0x07, 0xC7, 0xC7, 0xE6, 0x7E, 0x3C, 0xC0, 0x18, 0x03,
  0x80, 0x70, 0x0E, 0x0D, 0xC3, 0xB8, 0x76, 0x1E, 0xC7, 0x99, 0xE3, 0x78,
  0x7F, 0x0F, 0xE1, 0xCE, 0x30, 0xE6, 0x0E, 0xC1, 0xD8, 0x1C, 0x01, 0x00,
  0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF6, 0xDB, 0x00, 0x67, 0x3C, 0x77, 0xFF,
  0x3F, 0x79, 0x8F, 0x30, 0xE7, 0x18, 0x33, 0x0C, 0x19, 0x86, 0x0C, 0xC3,
  0x86, 0xE1, 0xC3, 0x70, 0xE1, 0xB8, 0x30, 0xEC, 0x18, 0x30, 0x67, 0x8D,
  0xF9, 0xF3, 0x3C, 0x67, 0x0C, 0xC1, 0x98, 0x37, 0x06, 0xE0, 0xDC, 0x1D,
  0x83, 0xB0, 0x30, 0x1F, 0x0F, 0xE7, 0x1D, 0x83, 0xE0, 0xF0, 0x3C, 0x0F,
  0x03, 0xE0, 0xDC, 0x67, 0xF8, 0x78, 0x60, 0x1D, 0xE3, 0xFF, 0x78, 0x66,
  0x0C, 0xC1, 0xD8, 0x3B, 0x07, 0x60, 0xEC, 0x19, 0x87, 0x3F, 0xC7, 0xF0,
  0xC0, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x30, 0x00, 0x0F, 0xCF,
  0xF7, 0x8D, 0x83, 0xE0, 0xF0, 0x3C, 0x0F, 0x07, 0xC1, 0xF8, 0x77, 0xF8,
  0x7E, 0x01, 0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x18, 0xCF, 0x7F,
  0xFC, 0x7C, 0x3C, 0x16, 0x03, 0x01, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x00,
  0x01, 0xC1, 0xF8, 0xF3, 0x98, 0x37, 0x00, 0x7E, 0x03, 0xE0, 0x0E, 0x00,
  0xCC, 0x19, 0xFF, 0x1F, 0x80, 0x18, 0x07, 0x01, 0xC0, 0x70, 0xFF, 0xFF,
  0xE1, 0xC0, 0x70, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0,
  0x30, 0x60, 0xD8, 0x3E, 0x0F, 0x83, 0xE0, 0xF8, 0x3E, 0x0F, 0x83, 0x60,
  0xD8, 0x37, 0xFC, 0xFB, 0xC0, 0xF0, 0x3E, 0x1D, 0x87, 0x61, 0x9C, 0xE3,
  0x30, 0xFC, 0x1E, 0x07, 0x81, 0xC0, 0x30, 0xC3, 0x07, 0x87, 0x1F, 0x0E,
  0x37, 0x3C, 0x6E, 0x78, 0xCC, 0xF3, 0x9B, 0x36, 0x36, 0x6C, 0x78, 0xF8,
  0xF1, 0xE0, 0xE3, 0xC1, 0x83, 0x00, 0x60, 0x37, 0x03, 0x38, 0xF1, 0xDC,
  0x0F, 0x80, 0xF0, 0x0F, 0x01, 0xF8, 0x39, 0x87, 0x1C, 0xE0, 0xEC, 0x07,
  0x00, 0x20, 0xC0, 0x3E, 0x07, 0x60, 0x67, 0x0E, 0x30, 0xE3, 0x9C, 0x19,
  0xC1, 0xD8, 0x0F, 0x80, 0xF0, 0x07, 0x00, 0x60, 0x0E, 0x00, 0xC0, 0x1C,
  0x01, 0x80, 0x18, 0x03, 0x80, 0x10, 0x00, 0x7F, 0xEF, 0xFC, 0x07, 0x00,
  0xC0, 0x38, 0x0E, 0x01, 0x80, 0x70, 0x1C, 0x07, 0x01, 0xFF, 0xFF, 0xF0,
  0x0F, 0x1F, 0x18, 0x18, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x70,
  0xE0, 0xF0, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x18, 0x1F, 0x0F,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF8, 0x18, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0E, 0x07, 0x07, 0x0E, 0x0C, 0x0C, 0x0C,
  0x0C, 0x0C, 0x1C, 0x18, 0xF8, 0xF0, 0x1C, 0x17, 0xE3, 0xE7, 0x3C, 0x3F,
  0x00, 0xE0
};

const GFXglyph __comic12pt7bGlyphs[] PROGMEM = {
  {     0,   0,   0,   7,    0,    1 },   // 0x20 ' '
  {     0,   3,  20,   6,    1,  -18 },   // 0x21 '!'
  {     8,   7,   8,  10,    1,  -17 },   // 0x22 '"'
  {    15,  20,  18,  20,    0,  -17 },   // 0x23 '#'
  {    60,  13,  25,  17,    1,  -20 },   // 0x24 '$'
  {   101,  17,  19,  20,    2,  -18 },   // 0x25 '%'
  {   142,  14,  19,  16,    1,  -17 },   // 0x26 '&'
  {   176,   3,   6,   9,    3,  -17 },   // 0x27 '''
  {   179,   7,  24,   9,    1,  -18 },   // 0x28 '('
  {   200,   7,  24,   9,    1,  -18 },   // 0x29 ')'
  {   221,  10,   9,  13,    1,  -17 },   // 0x2A '*'
  {   233,  10,  10,  12,    1,  -11 },   // 0x2B '+'
  {   246,   4,   6,   7,    2,   -1 },   // 0x2C ','
  {   249,   8,   2,  10,    1,   -6 },   // 0x2D '-'
  {   251,   3,   3,   6,    2,   -2 },   // 0x2E '.'
  {   253,  10,  20,  12,    1,  -18 },   // 0x2F '/'
  {   278,  13,  18,  15,    1,  -17 },   // 0x30 '0'
  {   308,   7,  18,  11,    2,  -17 },   // 0x31 '1'
  {   324,  11,  18,  15,    2,  -17 },   // 0x32 '2'
  {   349,  11,  18,  15,    2,  -17 },   // 0x33 '3'
  {   374,  13,  18,  15,    1,  -17 },   // 0x34 '4'
  {   404,  13,  18,  15,    1,  -17 },   // 0x35 '5'
  {   434,  12,  18,  15,    1,  -17 },   // 0x36 '6'
  {   461,  13,  18,  15,    1,  -17 },   // 0x37 '7'
  {   491,  12,  18,  15,    1,  -17 },   // 0x38 '8'
  {   518,  13,  19,  15,    1,  -17 },   // 0x39 '9'
  {   549,   3,  11,   7,    2,  -11 },   // 0x3A ':'
  {   554,   4,  14,   7,    1,  -11 },   // 0x3B ';'
  {   561,   7,  10,   9,    0,  -11 },   // 0x3C '<'
  {   570,   9,   8,  12,    1,  -10 },   // 0x3D '='
  {   579,   8,  11,   9,    1,  -12 },   // 0x3E '>'
  {   590,  10,  18,  13,    1,  -16 },   // 0x3F '?'
  {   613,  20,  20,  22,    1,  -18 },   // 0x40 '@'
  {   663,  14,  18,  18,    2,  -17 },   // 0x41 'A'
  {   695,  12,  19,  15,    2,  -17 },   // 0x42 'B'
  {   724,  13,  18,  14,    1,  -17 },   // 0x43 'C'
  {   754,  14,  18,  17,    2,  -17 },   // 0x44 'D'
  {   786,  12,  18,  15,    2,  -17 },   // 0x45 'E'
  {   813,  12,  18,  15,    2,  -17 },   // 0x46 'F'
  {   840,  15,  18,  16,    1,  -17 },   // 0x47 'G'
  {   874,  15,  18,  18,    2,  -17 },   // 0x48 'H'
  {   908,  11,  18,  13,    1,  -17 },   // 0x49 'I'
  {   933,  14,  18,  16,    1,  -17 },   // 0x4A 'J'
  {   965,  12,  18,  15,    3,  -17 },   // 0x4B 'K'
  {   992,  12,  18,  13,    1,  -17 },   // 0x4C 'L'
  {  1019,  19,  19,  21,    1,  -17 },   // 0x4D 'M'
  {  1065,  17,  18,  19,    1,  -17 },   // 0x4E 'N'
  {  1104,  17,  18,  19,    1,  -17 },   // 0x4F 'O'
  {  1143,  11,  18,  13,    1,  -17 },   // 0x50 'P'
  {  1168,  20,  23,  21,    1,  -17 },   // 0x51 'Q'
  {  1226,  13,  18,  15,    1,  -17 },   // 0x52 'R'
  {  1256,  13,  18,  17,    2,  -17 },   // 0x53 'S'
  {  1286,  16,  18,  16,    1,  -17 },   // 0x54 'T'
  {  1322,  14,  18,  18,    2,  -17 },   // 0x55 'U'
  {  1354,  14,  18,  16,    2,  -17 },   // 0x56 'V'
  {  1386,  23,  18,  25,    2,  -17 },   // 0x57 'W'
  {  1438,  15,  18,  17,    1,  -17 },   // 0x58 'X'
  {  1472,  14,  19,  15,    0,  -17 },   // 0x59 'Y'
  {  1506,  15,  18,  17,    1,  -17 },   // 0x5A 'Z'
  {  1540,   6,  24,   9,    2,  -18 },   // 0x5B '['
  {  1558,  10,  20,  13,    2,  -17 },   // 0x5C '\'
  {  1583,   6,  24,   9,    2,  -18 },   // 0x5D ']'
  {  1601,  10,   6,  14,    2,  -18 },   // 0x5E '^'
  {  1609,  16,   2,  15,    0,    3 },   // 0x5F '_'
  {  1613,   5,   6,  13,    2,  -18 },   // 0x60 '`'
  {  1617,  11,  12,  12,    1,  -11 },   // 0x61 'a'
  {  1634,  11,  19,  14,    2,  -18 },   // 0x62 'b'
  {  1661,  10,  12,  12,    1,  -11 },   // 0x63 'c'
  {  1676,  12,  19,  14,    1,  -18 },   // 0x64 'd'
  {  1705,  12,  12,  13,    1,  -11 },   // 0x65 'e'
  {  1723,  10,  20,  12,    1,  -18 },   // 0x66 'f'
  {  1748,  11,  19,  13,    1,  -11 },   // 0x67 'g'
  {  1775,  11,  19,  14,    2,  -18 },   // 0x68 'h'
  {  1802,   3,  17,   7,    2,  -16 },   // 0x69 'i'
  {  1809,   8,  24,  10,    0,  -16 },   // 0x6A 'j'
  {  1833,  11,  19,  13,    2,  -17 },   // 0x6B 'k'
  {  1860,   3,  19,   7,    2,  -18 },   // 0x6C 'l'
  {  1868,  17,  12,  19,    1,  -11 },   // 0x6D 'm'
  {  1894,  11,  12,  13,    1,  -11 },   // 0x6E 'n'
  {  1911,  10,  12,  13,    1,  -11 },   // 0x6F 'o'
  {  1926,  11,  20,  13,    1,  -12 },   // 0x70 'p'
  {  1954,  10,  19,  12,    1,  -11 },   // 0x71 'q'
  {  1978,   9,  12,  12,    2,  -11 },   // 0x72 'r'
  {  1992,  11,  12,  12,    0,  -11 },   // 0x73 's'
  {  2009,  10,  16,  11,    1,  -15 },   // 0x74 't'
  {  2029,  10,  12,  12,    1,  -11 },   // 0x75 'u'
  {  2044,  10,  12,  12,    1,  -11 },   // 0x76 'v'
  {  2059,  15,  12,  16,    1,  -11 },   // 0x77 'w'
  {  2082,  12,  13,  14,    1,  -11 },   // 0x78 'x'
  {  2102,  12,  19,  13,    0,  -11 },   // 0x79 'y'
  {  2131,  11,  12,  13,    1,  -11 },   // 0x7A 'z'
  {  2148,   8,  24,   9,    0,  -18 },   // 0x7B '{'
  {  2172,   2,  24,  10,    4,  -19 },   // 0x7C '|'
  {  2178,   8,  24,   9,    0,  -18 },   // 0x7D '}'
  {  2202,  12,   5,  14,    1,   -9 }
}; // 0x7E '~'

const GFXfont __comic12pt7b PROGMEM = {
  (uint8_t  *)__comic12pt7bBitmaps,
  (GFXglyph *)__comic12pt7bGlyphs,
  0x20, 0x7E, 33
};

// Approx. 2882 bytes


unsigned long milisAtStart = 86395000;
int yearAtStart = 2021;
byte monthAtStart = 12;
byte dayAtStart = 31;

void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Don't proceed, loop forever
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  //display.display();
  //delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();
  display.display();

  // Draw a single pixel in white
  //display.drawPixel(10, 10, SSD1306_WHITE);

  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!
  //display.display();
  //delay(2000);
  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...

  //testdrawline();      // Draw many lines

  //testdrawrect();      // Draw rectangles (outlines)

  //testfillrect();      // Draw rectangles (filled)

  //testdrawcircle();    // Draw circles (outlines)

  //testfillcircle();    // Draw circles (filled)

  //testdrawroundrect(); // Draw rounded rectangles (outlines)

  //testfillroundrect(); // Draw rounded rectangles (filled)

  //testdrawtriangle();  // Draw triangles (outlines)

  //testfilltriangle();  // Draw triangles (filled)

  //testdrawchar();      // Draw characters of the default font

  //testdrawstyles();    // Draw 'stylized' characters

  //testscrolltext();    // Draw scrolling text

  //testdrawbitmap();    // Draw a small bitmap image

  // Invert and restore display, pausing in-between
  display.invertDisplay(true);
  delay(500);
  display.invertDisplay(false);
  delay(500);

  // testanimate(logo_bmp, LOGO_WIDTH, LOGO_HEIGHT); // Animate bitmaps
}

void loop() {
  long rnMilis = milisAtStart + millis();
  long rnSecs = rnMilis / 1000;
  long rnMins = rnSecs / 60;
  long rnHours = rnMins / 60;

  byte rnDays = dayAtStart + rnHours / 24;
  byte rnMonth = monthAtStart;
  int rnYear = yearAtStart;


  // Arduino nedokáže udržet přesnej čas o moc dýl než 50 dní, takže
  // se nemůže stát, že by tenhle forloop nestačil. I tak jsem pro
  // jistotu použil 3x loop, aby nebyla ani majinkatá šance.
  for (int i = 0; i < 3; i++) {
    if (rnDays > 28) {
      switch (rnMonth) {
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
          if (rnDays > 31) {
            rnDays = rnDays - 31;
            rnMonth++;
          }
          break;
        case 4:
        case 6:
        case 9:
        case 11:
          if (rnDays > 30) {
            rnDays = rnDays - 30;
            rnMonth++;
          }
          break;
        case 2:
          if (rnDays > 28) {
            rnDays = rnDays - 28;
            rnMonth++;
          }
          break;
        case 12:
          if (rnDays > 31) {
            rnDays = rnDays - 31;
            rnMonth = 1;
            rnYear++;
          }
          break;
      }
    }
  }

  rnMilis = rnMilis % 1000;
  rnSecs = rnSecs % 60;
  rnMins = rnMins % 60;
  rnHours = rnHours % 24;

  draw12pCenteredText(noToDD(rnDays) + "." + noToDD(rnMonth) + "." + rnYear);
}

String noToDD(long i) {
  if (i < 10)
    return "0" + String(i);
  else
    return String(i);
}

String noToTD(long i) {
  if (i < 10)
    return "00" + String(i);
  else if (i < 100)
    return "0" + String(i);
  else
    return String(i);
}

void draw12pCenteredText(String str) {
  unsigned int width;
  unsigned int height;
  int curX;
  int curY;

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setFont(&__comic12pt7b);
  display.getTextBounds(str, 0, 0, &curX, &curY, &width, &height);  // na pozicích curX a curY to vrací souřadnice spodního levýho rohu, což nepotřebuju, ale ty pozice musej bejt vyplněný, tak používám něco, co pak hned přepíšu

  curX = 63 - (width / 2) ;
  curY = 15 + (height / 2)  ;

  Serial.println(str + ", " + String(width) + ", " + String(height) + ", " + String(curX) + ", " + String(curY));

  display.setCursor(curX, curY);
  display.println(str);
  display.display();

  display.setFont();
}

void testdrawline() {
  int16_t i;

  display.clearDisplay(); // Clear display buffer

  for (i = 0; i < display.width(); i += 4) {
    display.drawLine(0, 0, i, display.height() - 1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for (i = 0; i < display.height(); i += 4) {
    display.drawLine(0, 0, display.width() - 1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for (i = 0; i < display.width(); i += 4) {
    display.drawLine(0, display.height() - 1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for (i = display.height() - 1; i >= 0; i -= 4) {
    display.drawLine(0, display.height() - 1, display.width() - 1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for (i = display.width() - 1; i >= 0; i -= 4) {
    display.drawLine(display.width() - 1, display.height() - 1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for (i = display.height() - 1; i >= 0; i -= 4) {
    display.drawLine(display.width() - 1, display.height() - 1, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for (i = 0; i < display.height(); i += 4) {
    display.drawLine(display.width() - 1, 0, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for (i = 0; i < display.width(); i += 4) {
    display.drawLine(display.width() - 1, 0, i, display.height() - 1, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000); // Pause for 2 seconds
}

void testdrawrect(void) {
  display.clearDisplay();

  for (int16_t i = 0; i < display.height() / 2; i += 2) {
    display.drawRect(i, i, display.width() - 2 * i, display.height() - 2 * i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testfillrect(void) {
  display.clearDisplay();

  for (int16_t i = 0; i < display.height() / 2; i += 3) {
    // The INVERSE color is used so rectangles alternate white/black
    display.fillRect(i, i, display.width() - i * 2, display.height() - i * 2, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testdrawcircle(void) {
  display.clearDisplay();

  for (int16_t i = 0; i < max(display.width(), display.height()) / 2; i += 2) {
    display.drawCircle(display.width() / 2, display.height() / 2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillcircle(void) {
  display.clearDisplay();

  for (int16_t i = max(display.width(), display.height()) / 2; i > 0; i -= 3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2) {
    display.drawRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i,
                          display.height() / 4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillroundrect(void) {
  display.clearDisplay();

  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2) {
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i,
                          display.height() / 4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawtriangle(void) {
  display.clearDisplay();

  for (int16_t i = 0; i < max(display.width(), display.height()) / 2; i += 5) {
    display.drawTriangle(
      display.width() / 2  , display.height() / 2 - i,
      display.width() / 2 - i, display.height() / 2 + i,
      display.width() / 2 + i, display.height() / 2 + i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfilltriangle(void) {
  display.clearDisplay();

  for (int16_t i = max(display.width(), display.height()) / 2; i > 0; i -= 5) {
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
      display.width() / 2  , display.height() / 2 - i,
      display.width() / 2 - i, display.height() / 2 + i,
      display.width() / 2 + i, display.height() / 2 + i, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for (int16_t i = 0; i < 256; i++) {
    if (i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);
}

void testdrawstyles(void) {
  display.clearDisplay();

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0, 0);            // Start at top-left corner
  display.println(F("Hello, world!"));

  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
  display.println(3.141592);

  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);

  display.display();
  delay(2000);
}

void testscrolltext(void) {
  display.clearDisplay();

  display.setTextSize(2); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println(F("scroll"));
  display.display();      // Show initial text
  delay(100);

  // Scroll in various directions, pausing in-between:
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
  delay(1000);
}

void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for (f = 0; f < NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    icons[f][YPOS]   = -LOGO_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
    Serial.print(F("x: "));
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(F(" y: "));
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(F(" dy: "));
    Serial.println(icons[f][DELTAY], DEC);
  }

  for (;;) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    // Draw each snowflake:
    for (f = 0; f < NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    }

    display.display(); // Show the display buffer on the screen
    delay(200);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for (f = 0; f < NUMFLAKES; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height()) {
        // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}
